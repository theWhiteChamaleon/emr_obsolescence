{"version":3,"file":"static/js/974.7c130872.chunk.js","mappings":"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","sources":["components/DragAndDrop/DragAndDrop.jsx","hooks/useObsolescenceWidget.js","hooks/useObsolescenceDropableArea.js","pages/ObsolescenceWidget/MassUpdateDropdown.jsx","pages/ObsolescenceWidget/ObsolescenceWidgetToolbarNativeCta.jsx","pages/ObsolescenceWidget/ObsolescenceWidget.jsx","pages/ObsolescenceWidget/ObsolescencedataHelper.js","pages/ObsolescenceWidget/WidgetLifecycle.jsx","pages/ObsolescenceWidget/ObsolescenceIndex.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = useDroppableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      // console.log(\"Selected objects:\", selectedObjects);\r\n      // console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","// import { useDispatch, useSelector } from \"react-redux\";\r\n\r\n// import {\r\n//   setCAAllPlants,\r\n//   setCAHeaders,\r\n//   setCAItemDetails,\r\n//   setHeaders,\r\n//   setIsMFGCA,\r\n//   setLoading,\r\n//   setObselenceObjectData,\r\n//   setParentDetailsLoading,\r\n//   // setPlantObjectData,\r\n//   setProductChildren,\r\n//   setProposedChanges,\r\n//   setSpecDocument,\r\n//   setCAName,\r\n//   setCAData\r\n// } from \"../store/droppedObjectSlice\";\r\n// import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\n// import useToast from \"./useToast\";\r\n// import { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\n// import { initWidget } from \"../lib/widget\";\r\n// import { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\n// import { useCallback, useEffect } from \"react\";\r\n// import { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\n// import { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n// import {\r\n//   getAssignedClasses,\r\n//   getItemDetails,\r\n//   getLatestRevision,\r\n//   getScopedItms,\r\n// } from \"../pages/plantAssignment/dataHelpers\";\r\n// import { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\n// import { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\n// import { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\n\r\n// const useObsolescenceWidget = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const dispatch = useDispatch();\r\n//   const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n//   let email = window.widget.getValue(\"email\");\r\n\r\n//   console.log(\"Email in useObsolescenceWidget:\", email);\r\n//   // console.log(\"Security context using preferences are\", securitycontext);\r\n\r\n//   // const {droppedObjectData}= useSelector ((state)=> state.droppedObjectData)\r\n//   // console.log(\"SSSSSSSSSSSSSSSs\", droppedObjectData)\r\n\r\n//   const handleObsolescenceWidget = async (collabSpace,objectId, type, relativePath) => {\r\n//     if (!collabSpace || !objectId || !type || !relativePath) {\r\n//       console.error(\"[handleObsolescenceWidget] ❌ Missing required argument(s):\", {\r\n//         collabSpace,\r\n//         objectId,\r\n//         type,\r\n//         relativePath,\r\n//       });\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       dispatch(\r\n//         setObselenceObjectData({ parentObjectData: [] })\r\n//       );\r\n//       let tableOfArrayData =[]\r\n//       dispatch(setParentDetailsLoading(true));\r\n\r\n//       const headers = await fetchCsrfToken();\r\n//       console.log(\"headerssss\", headers);\r\n\r\n//       if (!headers) {\r\n//         showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n//         return;\r\n//       }\r\n\r\n//       console.log(\"[useObsolescenceWidget] CSRF Headers:\", headers);\r\n//       // ================ locate api\r\n//       // let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/locate`;\r\n//       // let body = {\r\n//       //   referencedObjects: [\r\n//       //     {\r\n//       //       source: ENOVIA_BASE_URL,\r\n//       //       type: type,\r\n//       //       identifier: objectId,\r\n//       //       relativePath: relativePath,\r\n//       //     },\r\n//       //   ],\r\n//       // };\r\n\r\n//       // let ChildObject = await callEnoviaWebService(\r\n//       //   \"POST\",\r\n//       //   baseURL,\r\n//       //   body,\r\n//       //   headers\r\n//       // );\r\n\r\n//       let ChildObject = await locateApi(ENOVIA_BASE_URL, objectId, type, relativePath,headers);\r\n//       console.log(\"SpecDetails Response:\", ChildObject);\r\n//       if (ChildObject.status && ChildObject.output) {\r\n//         let member =\r\n//           ChildObject?.output?.member[0][\"dseng:EngInstance\"]?.member;\r\n//           console.log(\"🔍 EngInstance members:\", member);\r\n\r\n//         if (member?.length > 0) {\r\n//           let url = [];\r\n//           member &&\r\n//             member.map((items) => {\r\n//               url.push(\r\n//                 items.parentObject?.source + items.parentObject?.relativePath\r\n//               );\r\n//             });\r\n//           console.log(\"URL\", url);\r\n//           let revisionStateData = [];\r\n//           if (url) {\r\n//             const promises = url.map(async (apiPath) => {\r\n//               const revisionState = await callEnoviaWebService(\r\n//                 \"GET\",\r\n//                 apiPath,\r\n//                 \"\",\r\n//                 headers\r\n//               );\r\n//               if (revisionState) {\r\n//                 revisionStateData = [\r\n//                   ...revisionStateData,\r\n//                   ...revisionState?.output?.member,\r\n//                 ];\r\n//               }\r\n//             });\r\n//             await Promise.all(promises);\r\n//           }\r\n\r\n//           console.log(\"revisionStateData\", revisionStateData);\r\n//           dispatch(\r\n//             setObselenceObjectData({ parentObjectData: revisionStateData })\r\n//           );\r\n//         } else {\r\n//           console.log(\"Not working\");\r\n//           console.warn(\"⚠️ No parent object members found in locate call.\");\r\n//         }\r\n\r\n//         if (type === \"Change Action\") {\r\n//           let isMFGCA = false;\r\n//           let ItemDetails = [];\r\n//           console.log(\"The object Type is Change Action\");\r\n//           const fetchChangeActionData = async () => {\r\n//             const CAURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n//             const response = await callEnoviaWebService(\r\n//               \"GET\",\r\n//               CAURL,\r\n//               \"\",\r\n//               headers\r\n//             );\r\n//             console.log(\"Response from Change Action URL:\", response);\r\n\r\n//             if (response.status && response.output) {\r\n//               // const realizedChanges = response.output.realizedChanges.map(\r\n//               //     (realizedChange) => realizedChange.where.identifier\r\n//               //   );\r\n\r\n//               for (let i = 0; i < response?.output?.proposedChanges?.length; i++) {\r\n//                 const change = response.output.proposedChanges[i];\r\n//                 const url = change.where.source + change.where.relativePath;\r\n//                 console.log(\"Processing change:\", change);\r\n//                 console.log(\"URL for change:\", url);\r\n//                 const responseofTable = await callEnoviaWebService(\r\n//                   \"GET\",\r\n//                   url,\r\n//                   \"\",\r\n//                   headers\r\n//                 );\r\n//                 console.log(\"Response of Table:\", responseofTable);\r\n//                 if(responseofTable.status){\r\n//                   console.log(\"Response of Table output:\", responseofTable?.output);\r\n//                   tableOfArrayData.push( {...responseofTable?.output?.member[0],changeIntent: change?.whats}\r\n//                   );\r\n//                 }\r\n//                 // if(responseofTable.status && responseofTable.output){\r\n//                 //   tableOfArrayData.push(responseofTable.output.member[0])\r\n\r\n//                 // }\r\n//               }\r\n//               console.log(\"Table of Array Data:\", tableOfArrayData);\r\n//               // const changeProcessingPromises =\r\n//               //   response.output.proposedChanges.map(async (change) => {\r\n//               //     let ItemId = change.where.identifier;\r\n//               //     let ItemType = change.where.type;\r\n//               //     console.log(\"Processing change:\", change);\r\n\r\n//               //     if (change.target === \"NewVersion\") {\r\n//               //       const sLatestID = await getLatestRevision(\r\n//               //         ItemId,\r\n//               //         ItemType,\r\n//               //         headers\r\n//               //       );\r\n//               //       if (realizedChanges.includes(sLatestID)) {\r\n//               //         ItemId = sLatestID;\r\n//               //       }\r\n//               //     }\r\n//               //     if (\r\n//               //       ItemType !== \"Raw_Material\" &&\r\n//               //       ItemType !== \"VPMReference\"\r\n//               //     ) {\r\n//               //       isMFGCA = true;\r\n//               //       const mfgDetails = await getScopedItms(ItemId, headers);\r\n//               //       console.log(\"MFG Details are:\", mfgDetails);\r\n//               //       ItemId = mfgDetails.identifier;\r\n//               //       ItemType = mfgDetails.type;\r\n//               //     }\r\n//               //     if (ItemId !== undefined && ItemType !== undefined) {\r\n//               //       try {\r\n//               //         const [ItemPlants, Iteminfo] = await Promise.all([\r\n//               //           getAssignedClasses(ItemId, headers),\r\n//               //           getItemDetails(ItemId, ItemType, headers),\r\n//               //         ]);\r\n\r\n//               //         ItemDetails.push({\r\n//               //           ItemId,\r\n//               //           ItemType,\r\n//               //           ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n//               //           ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n//               //           ItemMBOM:\r\n//               //             Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]\r\n//               //               ?.EMR_hasMBOM || \"N/A\",\r\n//               //           ItemPlants,\r\n//               //         });\r\n//               //       } catch (err) {\r\n//               //         console.error(\r\n//               //           `Error processing change for item ${ItemId}:`,\r\n//               //           err\r\n//               //         );\r\n//               //       }\r\n//               //     }\r\n//               //   });\r\n\r\n//               // await Promise.all(changeProcessingPromises);\r\n\r\n//             } else {\r\n//               console.error(\r\n//                 \"Invalid response structure or no proposed changes.\"\r\n//               );\r\n//             }\r\n//           };\r\n//           const CAAllPlantsData = async () => {\r\n//             // Replace this with your actual API call\r\n//             const allPlants = await getAllPlants(\r\n//               [collabSpace],\r\n//               headers,\r\n//               objectId\r\n//             ); // getAllPlants wants collabspace as an array.\r\n//             console.log(\"Parallel API response:\", allPlants);\r\n//             dispatch(setCAAllPlants(allPlants));\r\n//           };\r\n\r\n//           // Run both functions in parallel\r\n//           await Promise.all([fetchChangeActionData(), CAAllPlantsData()]);\r\n\r\n//           dispatch(setParentDetailsLoading(false));\r\n//           dispatch(setCAItemDetails(ItemDetails));\r\n//           dispatch(setIsMFGCA(isMFGCA));\r\n//           dispatch(setCAHeaders(headers));\r\n//           dispatch(setObselenceObjectData({parentObjectData: tableOfArrayData}))\r\n//         } else {\r\n//           // Step 1: Fetch user group collaboration spaces\r\n//           const userGroupCollab = await getUserGroupCollab(\r\n//             headers,\r\n//             objectId,\r\n//             email\r\n//           );\r\n//           console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n//           let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n//           console.log(\r\n//             \"[Use Plant Assignment] All CollabSpaces:\",\r\n//             allCollabSpaces\r\n//           );\r\n\r\n//           // Step 2: Fetch all plants if collab spaces exist\r\n//           let allPlants = [];\r\n//           if (allCollabSpaces.length > 0) {\r\n//             allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n//             console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n//           } else {\r\n//             console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n//           }\r\n\r\n//           // Step 3: Fetch assigned plants if there are any\r\n//           if (allPlants.length > 0) {\r\n//             const plants = await fetchAssignedPlants(\r\n//               allPlants,\r\n//               headers,\r\n//               objectId\r\n//             );\r\n//             console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n//             if (plants.success) {\r\n//               dispatch(setObselenceObjectData(plants.data.plantData));\r\n//               dispatch(setHeaders(headers));\r\n//             } else {\r\n//               console.error(\"Failed to fetch plant data.\");\r\n//             }\r\n//           } else {\r\n//             console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n//           }\r\n\r\n//           // Step 4: Fetch Product Children based on type\r\n//           let getProductChildren = {};\r\n//           if (type === \"Raw_Material\") {\r\n//             getProductChildren = { success: true, data: [] };\r\n//           } else {\r\n//             getProductChildren = await fetchProductChildren(\r\n//               headers,\r\n//               objectId,\r\n//               type\r\n//             );\r\n//           }\r\n\r\n//           console.log(\"Type After:\", type);\r\n//           console.log(\r\n//             \"[Use Plant Assignment] Product Children:\",\r\n//             getProductChildren\r\n//           );\r\n\r\n//           if (getProductChildren.success) {\r\n//             dispatch(setProductChildren(getProductChildren.data));\r\n//           }\r\n\r\n//           // Step 5: Fetch Change Action details\r\n//           const state = null;\r\n//           const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n//           console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n//           if (getCaDetails.success) {\r\n//             dispatch(setCAName(getCaDetails.data));\r\n//             dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n//             dispatch(setCAData(getCaDetails.CAData));\r\n//           }\r\n\r\n//           console.log(\"[Plant Assignment] All services executed successfully.\");\r\n//         }\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"[useObsolescenceWidget] Error:\", error);\r\n//       throw error; // Let the caller handle the error\r\n//     } finally {\r\n//       dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n//     }\r\n//   };\r\n\r\n//   // ============ obselete Button Click Checking State ==============\r\n//   const  obsoleteStateChecking = async(tableData, droppedObjectData)=>{\r\n//     if(!tableData){\r\n//       showErrorToast(\"Items Not Found\");\r\n//       return;\r\n//     }\r\n//     console.log(\"droppedObjectData in custom hook\", droppedObjectData)\r\n//     let itemGroupId = droppedObjectData?.initialDraggedData?.data;\r\n//     let objectId = itemGroupId?.items[0]?.objectId\r\n//     console.log(\"card Data object Id\", objectId)\r\n//     try{\r\n//       dispatch(setLoading(true));\r\n//       const headers = await fetchCsrfToken();\r\n//       console.log(\"headerssss\", headers);\r\n\r\n//       if (!headers) {\r\n//         showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n//         return;\r\n//       }\r\n//       let locateParentObjectsArray = [];\r\n//       let finalObsoleteStatusArray =[]\r\n//       for (let i = 0; i < tableData.length; i++) {\r\n//         const item = tableData[i];\r\n//         console.log(\"Checking item:\", item);\r\n//         let locateApiResponse = await locateApi(\r\n//           ENOVIA_BASE_URL,\r\n//           item.id,\r\n//           item.type,\r\n//           `/resources/v1/modeler/dseng/dseng:EngItem/${item.id}`,\r\n//           headers\r\n//         );\r\n//         console.log(\"Locate API Response when click Obsolote:\", locateApiResponse);\r\n//         if(locateApiResponse?.status){\r\n//           // if(locateApiResponse?.output?.member?.length === 0){\r\n//           //   if(droppedObjectData?.cardData['Maturity State'] === 'In Work'){\r\n//           //   await stateChange(objectId, \"In Approval\")\r\n//           //   }else if (droppedObjectData?.cardData['Maturity State'] === 'Draft') {\r\n//           //     // First call: change to \"In Work\"\r\n//           //     const response1 = await stateChange(objectId, \"In Work\");\r\n//           //     // If the first call succeeds, make the second call\r\n//           //     if (response1?.success) {\r\n//           //       await stateChange(objectId, \"In Approval\");\r\n//           //     } else {\r\n//           //       console.error(\"Failed to update to 'In Work'\");\r\n//           //     }\r\n//           //   }\r\n//           // }\r\n//         const engInstances = locateApiResponse?.output?.member[0] || [];\r\n//         const locateParentObject = engInstances['dseng:EngInstance']?.member || null;\r\n//           locateParentObjectsArray.push(locateParentObject);\r\n//         }\r\n//         console.log(\"Locate Parent Objects Array:\", locateParentObjectsArray);\r\n//         if(locateParentObjectsArray){\r\n//           for (let j = 0; j < locateParentObjectsArray.length; j++) {\r\n//             const parentMembers = locateParentObjectsArray[j];\r\n//             console.log(\"Parent Object:\", parentMembers);\r\n//             if(parentMembers.length > 0){\r\n//               await Promise.all(parentMembers.map(async (item) => {\r\n//                 let revisionState = await callEnoviaWebService(\r\n//                   \"GET\",\r\n//                   `${item?.parentObject?.source}${item?.parentObject?.relativePath}`,\r\n//                   \"\",\r\n//                   headers\r\n//                 );\r\n//                 console.log(\"Revision State Response:\", revisionState);\r\n//                 if (revisionState?.status) {\r\n//                   const obsoleteStateData = revisionState?.output?.member[0];\r\n//                   finalObsoleteStatusArray.push(obsoleteStateData);\r\n//                 }\r\n//               }));\r\n//             }\r\n//           }\r\n//         }\r\n//       }\r\n//       console.log(\"finalObsoleteStatusArray =======================\", finalObsoleteStatusArray);\r\n//       const hasObsolete = finalObsoleteStatusArray.every(item => item.state === \"OBSOLETE\");\r\n//       console.log(\"hasObsolete ============\", hasObsolete)\r\n//       if (hasObsolete) {\r\n//         console.log(`Success: All ${finalObsoleteStatusArray?.length} items are OBSOLETE.`);\r\n//         console.log(\"droppedObjectData?.cardData['Maturity State']\",droppedObjectData?.cardData['Maturity State'])\r\n//         if(droppedObjectData?.cardData['Maturity State'] === 'In Work'){\r\n//           await stateChange(objectId, \"In Approval\", ENOVIA_BASE_URL, headers, showErrorToast)\r\n//         }else if (droppedObjectData?.cardData['Maturity State'] === 'Draft') {\r\n//           // First call: change to \"In Work\"\r\n//           const response1 = await stateChange(objectId, \"In Work\", ENOVIA_BASE_URL, headers, showErrorToast);\r\n//           // If the first call succeeds, make the second call\r\n//           if (response1?.success) {\r\n//             await stateChange(objectId, \"In Approval\", ENOVIA_BASE_URL, headers, showErrorToast)\r\n// ;\r\n//           } else {\r\n//             console.error(\"Failed to update to 'In Work'\");\r\n//           }\r\n//         }\r\n//       } else {\r\n//         showErrorToast(\"All Parent Items Should be Obsolete\");\r\n//       }\r\n//     }catch(err){\r\n//       showErrorToast(\"Error in Obsolence\")\r\n//     }finally{\r\n//       dispatch(setLoading(false));\r\n//     }\r\n\r\n//   }\r\n\r\n//   // ============ obselete Button Click Checking State ==============\r\n\r\n//   return { handleObsolescenceWidget,\r\n//     obsoleteStateChecking\r\n//    };\r\n// };\r\n\r\n// export default useObsolescenceWidget;\r\n\r\n// async function locateApi(ENOVIA_BASE_URL,objectId, type, relativePath, headers) {\r\n//     let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/locate`;\r\n//     let body = {\r\n//       referencedObjects: [\r\n//         {\r\n//           source: ENOVIA_BASE_URL,\r\n//           type: type,\r\n//           identifier: objectId,\r\n//           relativePath: relativePath,\r\n//         },\r\n//       ],\r\n//     };\r\n\r\n//     let ChildObject = await callEnoviaWebService(\r\n//       \"POST\",\r\n//       baseURL,\r\n//       body,\r\n//       headers\r\n//     );\r\n\r\n//     return ChildObject;\r\n// }\r\n\r\n// async function stateChange(objectId, nextState, ENOVIA_BASE_URL, headers, showErrorToast){\r\n//   console.log(\"objectId, nextState\",objectId, nextState)\r\n//   try{\r\n//     let body = {\r\n//         data: [\r\n//           {\r\n//             id: objectId,\r\n//             nextState: nextState\r\n//           }\r\n//         ]\r\n//     }\r\n//     console.log('')\r\n//     let maturitySatate = await maturityChangeApi(ENOVIA_BASE_URL,body, headers );\r\n//     console.log(\"maturitySatate in custom hook\", maturitySatate)\r\n//     return maturitySatate\r\n//   }catch(err){\r\n//     console.log(\"Error updating State\")\r\n//     showErrorToast(\"Error Updating State\")\r\n//   }\r\n// }\r\n// async function maturityChangeApi(ENOVIA_BASE_URL,body, headers){\r\n//  let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/maturity/changeState`;\r\n\r\n//     let ChildObject = await callEnoviaWebService(\r\n//       \"POST\",\r\n//       baseURL,\r\n//       body,\r\n//       headers\r\n//     );\r\n\r\n//     return ChildObject;\r\n// }\r\n\r\n/////////////working///////////////////\r\n\r\n//////////working//////////////////\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setLoading,\r\n  setObselenceObjectData,\r\n  setParentDetailsLoading,\r\n  // setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setSpecDocument,\r\n  setCAName,\r\n  setCAData,\r\n  setCACestampDetails,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\nimport {\r\n  getAssignedClasses,\r\n  getItemDetails,\r\n  getLatestRevision,\r\n  getScopedItms,\r\n} from \"../pages/plantAssignment/dataHelpers\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\n\r\nconst useObsolescenceWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in useObsolescenceWidget:\", email);\r\n\r\n  const handleObsolescenceWidget = async (\r\n    collabSpace,\r\n    objectId,\r\n    type,\r\n    relativePath\r\n  ) => {\r\n    if (!collabSpace || !objectId || !type || !relativePath) {\r\n      console.error(\r\n        \"[handleObsolescenceWidget] ❌ Missing required argument(s):\",\r\n        {\r\n          collabSpace,\r\n          objectId,\r\n          type,\r\n          relativePath,\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    try {\r\n      dispatch(setObselenceObjectData({ parentObjectData: [] }));\r\n      let tableOfArrayData = [];\r\n      dispatch(setParentDetailsLoading(true));\r\n\r\n      const headers = await fetchCsrfToken();\r\n      console.log(\"headerssss\", headers);\r\n\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      console.log(\"[useObsolescenceWidget] CSRF Headers:\", headers);\r\n\r\n      let ChildObject = await locateApi(\r\n        ENOVIA_BASE_URL,\r\n        objectId,\r\n        type,\r\n        relativePath,\r\n        headers\r\n      );\r\n      console.log(\"SpecDetails Response:\", ChildObject);\r\n      if (ChildObject.status && ChildObject.output) {\r\n        let member =\r\n          ChildObject?.output?.member[0][\"dseng:EngInstance\"]?.member;\r\n        console.log(\"🔍 EngInstance members:\", member);\r\n\r\n        if (member?.length > 0) {\r\n          let url = [];\r\n          member &&\r\n            member.map((items) => {\r\n              url.push(\r\n                items.parentObject?.source + items.parentObject?.relativePath\r\n              );\r\n            });\r\n          console.log(\"URL\", url);\r\n          let revisionStateData = [];\r\n          if (url) {\r\n            const promises = url.map(async (apiPath) => {\r\n              const revisionState = await callEnoviaWebService(\r\n                \"GET\",\r\n                apiPath,\r\n                \"\",\r\n                headers\r\n              );\r\n              if (revisionState) {\r\n                revisionStateData = [\r\n                  ...revisionStateData,\r\n                  ...revisionState?.output?.member,\r\n                ];\r\n              }\r\n            });\r\n            await Promise.all(promises);\r\n          }\r\n\r\n          console.log(\"revisionStateData\", revisionStateData);\r\n          dispatch(\r\n            setObselenceObjectData({ parentObjectData: revisionStateData })\r\n          );\r\n        } else {\r\n          console.log(\"Not working\");\r\n          console.warn(\"⚠️ No parent object members found in locate call.\");\r\n        }\r\n\r\n        if (type === \"Change Action\") {\r\n          let isMFGCA = false;\r\n          let ItemDetails = [];\r\n          console.log(\"The object Type is Change Action\");\r\n\r\n          // Fetch Change Action data (existing code)\r\n\r\n          const fetchChangeActionData = async () => {\r\n            const CAURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n            const response = await callEnoviaWebService(\r\n              \"GET\",\r\n              CAURL,\r\n              \"\",\r\n              headers\r\n            );\r\n            console.log(\"Response from Change Action URL:\", response);\r\n\r\n            if (response.status && response.output) {\r\n              // const realizedChanges = response.output.realizedChanges.map(\r\n              //     (realizedChange) => realizedChange.where.identifier\r\n              //   );\r\n\r\n              for (\r\n                let i = 0;\r\n                i < response?.output?.proposedChanges?.length;\r\n                i++\r\n              ) {\r\n                const change = response.output.proposedChanges[i];\r\n                const url = change.where.source + change.where.relativePath;\r\n                console.log(\"Processing change:\", change);\r\n                console.log(\"URL for change:\", url);\r\n                const responseofTable = await callEnoviaWebService(\r\n                  \"GET\",\r\n                  url,\r\n                  \"\",\r\n                  headers\r\n                );\r\n                console.log(\"Response of Table:\", responseofTable);\r\n                if (responseofTable.status) {\r\n                  console.log(\r\n                    \"Response of Table output:\",\r\n                    responseofTable?.output\r\n                  );\r\n                  tableOfArrayData.push({\r\n                    ...responseofTable?.output?.member[0],\r\n                    changeIntent: change?.whats,\r\n                  });\r\n                }\r\n              }\r\n              console.log(\"Table of Array Data:\", tableOfArrayData);\r\n            } else {\r\n              console.error(\r\n                \"Invalid response structure or no proposed changes.\"\r\n              );\r\n            }\r\n          };\r\n          const CAAllPlantsData = async () => {\r\n            // Replace this with your actual API call\r\n            const allPlants = await getAllPlants(\r\n              [collabSpace],\r\n              headers,\r\n              objectId\r\n            ); // getAllPlants wants collabspace as an array.\r\n            console.log(\"Parallel API response:\", allPlants);\r\n            dispatch(setCAAllPlants(allPlants));\r\n          };\r\n\r\n          const CAcestampDetails = await fetchCACestampDetails(\r\n            ENOVIA_BASE_URL,\r\n            objectId,\r\n            headers\r\n          );\r\n          console.log(\"CA Cestamp & Details:\", CAcestampDetails);\r\n          dispatch(setCACestampDetails(CAcestampDetails));\r\n\r\n          // Run both functions in parallel\r\n          await Promise.all([fetchChangeActionData(), CAAllPlantsData()]);\r\n\r\n          dispatch(setParentDetailsLoading(false));\r\n          dispatch(setCAItemDetails(ItemDetails));\r\n          dispatch(setIsMFGCA(isMFGCA));\r\n          dispatch(setCAHeaders(headers));\r\n          dispatch(\r\n            setObselenceObjectData({ parentObjectData: tableOfArrayData })\r\n          );\r\n          dispatch(setCACestampDetails(CAcestampDetails));\r\n        } else {\r\n          // Step 1: Fetch user group collaboration spaces\r\n          const userGroupCollab = await getUserGroupCollab(\r\n            headers,\r\n            objectId,\r\n            email\r\n          );\r\n          console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n          let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n          console.log(\r\n            \"[Use Plant Assignment] All CollabSpaces:\",\r\n            allCollabSpaces\r\n          );\r\n\r\n          // Step 2: Fetch all plants if collab spaces exist\r\n          let allPlants = [];\r\n          if (allCollabSpaces.length > 0) {\r\n            allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n            console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n          } else {\r\n            console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n          }\r\n\r\n          // Step 3: Fetch assigned plants if there are any\r\n          if (allPlants.length > 0) {\r\n            const plants = await fetchAssignedPlants(\r\n              allPlants,\r\n              headers,\r\n              objectId\r\n            );\r\n            console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n            if (plants.success) {\r\n              dispatch(setObselenceObjectData(plants.data.plantData));\r\n              dispatch(setHeaders(headers));\r\n            } else {\r\n              console.error(\"Failed to fetch plant data.\");\r\n            }\r\n          } else {\r\n            console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n          }\r\n\r\n          // Step 4: Fetch Product Children based on type\r\n          let getProductChildren = {};\r\n          if (type === \"Raw_Material\") {\r\n            getProductChildren = { success: true, data: [] };\r\n          } else {\r\n            getProductChildren = await fetchProductChildren(\r\n              headers,\r\n              objectId,\r\n              type\r\n            );\r\n          }\r\n\r\n          console.log(\"Type After:\", type);\r\n          console.log(\r\n            \"[Use Plant Assignment] Product Children:\",\r\n            getProductChildren\r\n          );\r\n\r\n          if (getProductChildren.success) {\r\n            dispatch(setProductChildren(getProductChildren.data));\r\n          }\r\n\r\n          // Step 5: Fetch Change Action details\r\n          const state = null;\r\n          const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n          console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n          if (getCaDetails.success) {\r\n            dispatch(setCAName(getCaDetails.data));\r\n            dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n            dispatch(setCAData(getCaDetails.CAData));\r\n          }\r\n\r\n          console.log(\"[Plant Assignment] All services executed successfully.\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[useObsolescenceWidget] Error:\", error);\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n    }\r\n  };\r\n\r\n  // ============ obselete Button Click Checking State ==============\r\n  const obsoleteStateChecking = async (tableData, droppedObjectData) => {\r\n    if (!tableData) {\r\n      showErrorToast(\"Items Not Found\");\r\n      return;\r\n    }\r\n    console.log(\"droppedObjectData in custom hook\", droppedObjectData);\r\n    let itemGroupId = droppedObjectData?.initialDraggedData?.data;\r\n    let objectId = itemGroupId?.items[0]?.objectId;\r\n    console.log(\"card Data object Id\", objectId);\r\n    try {\r\n      dispatch(setLoading(true));\r\n      const headers = await fetchCsrfToken();\r\n      console.log(\"headerssss\", headers);\r\n\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      let locateParentObjectsArray = [];\r\n      let finalObsoleteStatusArray = [];\r\n      for (let i = 0; i < tableData.length; i++) {\r\n        const item = tableData[i];\r\n        console.log(\"Checking item:\", item);\r\n        let locateApiResponse = await locateApi(\r\n          ENOVIA_BASE_URL,\r\n          item.id,\r\n          item.type,\r\n          `/resources/v1/modeler/dseng/dseng:EngItem/${item.id}`,\r\n          headers\r\n        );\r\n        console.log(\r\n          \"Locate API Response when click Obsolote:\",\r\n          locateApiResponse\r\n        );\r\n        if (locateApiResponse?.status) {\r\n\r\n          const engInstances = locateApiResponse?.output?.member[0] || [];\r\n          const locateParentObject =\r\n            engInstances[\"dseng:EngInstance\"]?.member || null;\r\n          locateParentObjectsArray.push(locateParentObject);\r\n        }\r\n        console.log(\"Locate Parent Objects Array:\", locateParentObjectsArray);\r\n        if (locateParentObjectsArray) {\r\n          for (let j = 0; j < locateParentObjectsArray.length; j++) {\r\n            const parentMembers = locateParentObjectsArray[j];\r\n            console.log(\"Parent Object:\", parentMembers);\r\n            if (parentMembers.length > 0) {\r\n              await Promise.all(\r\n                parentMembers.map(async (item) => {\r\n                  let revisionState = await callEnoviaWebService(\r\n                    \"GET\",\r\n                    `${item?.parentObject?.source}${item?.parentObject?.relativePath}`,\r\n                    \"\",\r\n                    headers\r\n                  );\r\n                  console.log(\"Revision State Response:\", revisionState);\r\n                  if (revisionState?.status) {\r\n                    const obsoleteStateData = revisionState?.output?.member[0];\r\n                    finalObsoleteStatusArray.push(obsoleteStateData);\r\n                  }\r\n                })\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n      console.log(\r\n        \"finalObsoleteStatusArray =======================\",\r\n        finalObsoleteStatusArray\r\n      );\r\n      const hasObsolete = finalObsoleteStatusArray.every(\r\n        (item) => item.state === \"OBSOLETE\"\r\n      );\r\n      console.log(\"hasObsolete ============\", hasObsolete);\r\n      // const { approveCA } = useObsolescenceWidget();\r\n\r\n      if (hasObsolete) {\r\n        console.log(\r\n          `Success: All ${finalObsoleteStatusArray?.length} items are OBSOLETE.`\r\n        );\r\n      \r\n        console.log(\r\n          \"droppedObjectData?.cardData['Maturity State']\",\r\n          droppedObjectData?.cardData[\"Maturity State\"]\r\n        );\r\n      \r\n        // if (droppedObjectData?.cardData[\"Maturity State\"] === \"In Work\") {\r\n        //   const response = await stateChange(\r\n        //     objectId,\r\n        //     \"In Approval\",\r\n        //     ENOVIA_BASE_URL,\r\n        //     headers,\r\n        //     showErrorToast\r\n        //   );\r\n        //   if (response.success) {\r\n        //     // Now that state is 'In Approval', approve the Change Action\r\n        //     await approveCA(objectId);\r\n        //   } else {\r\n        //     console.error(\"Failed to update to 'In Approval'\");\r\n        //   }\r\n        // } \r\n        if (droppedObjectData?.cardData[\"Maturity State\"] === \"In Work\") {\r\n          const response = await stateChange(\r\n            objectId,\r\n            \"In Approval\",\r\n            ENOVIA_BASE_URL,\r\n            headers,\r\n            showErrorToast\r\n          );\r\n          if (response.success) {\r\n            const ready = await waitForCAState(ENOVIA_BASE_URL, objectId, headers, \"In Approval\");\r\n            if (ready) {\r\n              await approveCA(objectId);\r\n            } else {\r\n              showErrorToast(\"CA did not reach 'In Approval' state in time.\");\r\n            }\r\n          } else {\r\n            console.error(\"Failed to update to 'In Approval'\");\r\n          }\r\n        }\r\n        \r\n        else if (droppedObjectData?.cardData[\"Maturity State\"] === \"Draft\") {\r\n          // First call: change to \"In Work\"\r\n          const response1 = await stateChange(\r\n            objectId,\r\n            \"In Work\",\r\n            ENOVIA_BASE_URL,\r\n            headers,\r\n            showErrorToast\r\n          );\r\n      \r\n          if (response1?.success) {\r\n            // Then change to \"In Approval\"\r\n            const response2 = await stateChange(\r\n              objectId,\r\n              \"In Approval\",\r\n              ENOVIA_BASE_URL,\r\n              headers,\r\n              showErrorToast\r\n            );\r\n            if (response2.success) {\r\n              // Approve CA after successful state change\r\n              await approveCA(objectId);\r\n            } else {\r\n              console.error(\"Failed to update to 'In Approval'\");\r\n            }\r\n          } else {\r\n            console.error(\"Failed to update to 'In Work'\");\r\n          }\r\n        } else if (droppedObjectData?.cardData[\"Maturity State\"] === \"In Approval\") {\r\n          // Already in 'In Approval', so approve immediately\r\n          await approveCA(objectId);\r\n        } else {\r\n          showErrorToast(\r\n            `Cannot approve Change Action from state: ${droppedObjectData?.cardData[\"Maturity State\"]}`\r\n          );\r\n        }\r\n      } else {\r\n        showErrorToast(\"All Parent Items Should be Obsolete\");\r\n      }\r\n    } catch (err) {\r\n      showErrorToast(\"Error in Obsolence\");\r\n    } finally {\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n\r\n  // const approveCA = async (objectId, cestamp) => {\r\n  //   try {\r\n  //     dispatch(setLoading(true));\r\n  //     const headers = await fetchCsrfToken();\r\n  //     if (!headers) {\r\n  //       showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n  //       return;\r\n  //     }\r\n\r\n  //     const response = await approveChangeAction(\r\n  //       ENOVIA_BASE_URL,\r\n  //       objectId,\r\n  //       cestamp,\r\n  //       headers\r\n  //     );\r\n\r\n  //     if (response.success) {\r\n  //       console.log(\"✅ Change Action approved successfully\");\r\n  //     } else {\r\n  //       showErrorToast(`Failed to approve CA: ${response.error}`);\r\n  //     }\r\n  //   } catch (error) {\r\n  //     showErrorToast(\"Unexpected error while approving CA\");\r\n  //     console.error(\"[approveCA] Error:\", error);\r\n  //   } finally {\r\n  //     dispatch(setLoading(false));\r\n  //   }\r\n  // };\r\n\r\n  // ============ obselete Button Click Checking State ==============\r\n\r\n  const approveCA = async (objectId) => {\r\n    try {\r\n      dispatch(setLoading(true));\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n  \r\n      // Fetch the latest CA details to get the current cestamp\r\n      const caDetails = await fetchCACestampDetails(ENOVIA_BASE_URL, objectId, headers);\r\n      if (!caDetails || !caDetails.cestamp) {\r\n        showErrorToast(\"Failed to get valid cestamp for approval.\");\r\n        return;\r\n      }\r\n  \r\n      const cestamp = caDetails.cestamp;\r\n  \r\n      const response = await approveChangeAction(\r\n        ENOVIA_BASE_URL,\r\n        objectId,\r\n        cestamp,\r\n        headers\r\n      );\r\n      console.log(\"approveChangeAction response:\", response);\r\n  \r\n      if (response.success) {\r\n        console.log(\"✅ Change Action approved successfully\");\r\n      } else {\r\n        showErrorToast(`Failed to approve CA: ${response.error}`);\r\n      }\r\n    } catch (error) {\r\n      showErrorToast(\"Unexpected error while approving CA\");\r\n      console.error(\"[approveCA] Error:\", error);\r\n    } finally {\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n  \r\n  return { handleObsolescenceWidget, obsoleteStateChecking, approveCA };\r\n};\r\n\r\nexport default useObsolescenceWidget;\r\n\r\nasync function locateApi(\r\n  ENOVIA_BASE_URL,\r\n  objectId,\r\n  type,\r\n  relativePath,\r\n  headers\r\n) {\r\n  let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/locate`;\r\n  let body = {\r\n    referencedObjects: [\r\n      {\r\n        source: ENOVIA_BASE_URL,\r\n        type: type,\r\n        identifier: objectId,\r\n        relativePath: relativePath,\r\n      },\r\n    ],\r\n  };\r\n\r\n  let ChildObject = await callEnoviaWebService(\"POST\", baseURL, body, headers);\r\n\r\n  return ChildObject;\r\n}\r\n\r\nasync function stateChange(\r\n  objectId,\r\n  nextState,\r\n  ENOVIA_BASE_URL,\r\n  headers,\r\n  showErrorToast\r\n) {\r\n  console.log(\"Attempting state change:\", { objectId, nextState });\r\n  try {\r\n    let body = {\r\n      data: [\r\n        {\r\n          id: objectId,\r\n          nextState: nextState,\r\n        },\r\n      ],\r\n    };\r\n\r\n    console.log(\"Request body:\", JSON.stringify(body));\r\n    let maturityState = await maturityChangeApi(ENOVIA_BASE_URL, body, headers);\r\n    console.log(\"API response:\", maturityState);\r\n\r\n    if (!maturityState.status) {\r\n      let errorMessage = \"Unknown error occurred\";\r\n\r\n      if (maturityState.errorMessage) {\r\n        errorMessage = maturityState.errorMessage;\r\n      } else if (\r\n        maturityState.output?.messages &&\r\n        maturityState.output.messages.length > 0\r\n      ) {\r\n        errorMessage = maturityState.output.messages[0].message || errorMessage;\r\n      } else if (maturityState.message) {\r\n        errorMessage = maturityState.message;\r\n      }\r\n\r\n      showErrorToast(errorMessage);\r\n      return { success: false, error: errorMessage };\r\n    }\r\n\r\n    return { success: true, data: maturityState };\r\n  } catch (err) {\r\n    console.error(\"Error updating State:\", err);\r\n    showErrorToast(\"Error updating state\");\r\n    return { success: false, error: err.message || \"Error updating state\" };\r\n  }\r\n}\r\n\r\nasync function maturityChangeApi(ENOVIA_BASE_URL, body, headers) {\r\n  let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/maturity/changeState`;\r\n\r\n  let ChildObject = await callEnoviaWebService(\"POST\", baseURL, body, headers);\r\n\r\n  return ChildObject;\r\n}\r\n\r\n// New function to fetch CA cestamp & details\r\nasync function fetchCACestampDetails(ENOVIA_BASE_URL, objectId, headers) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dscm/changeaction/${objectId}`;\r\n  try {\r\n    const response = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    if (response.status && response.output) {\r\n      return response.output; // Return the CA details\r\n    } else {\r\n      console.error(\"[fetchCACestampDetails] Invalid response\", response);\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error(\r\n      \"[fetchCACestampDetails] Error fetching CA cestamp details:\",\r\n      error\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function approveChangeAction(\r\n  ENOVIA_BASE_URL,\r\n  objectId,\r\n  cestamp,\r\n  headers\r\n) {\r\n  const url = `${ENOVIA_BASE_URL}/resources/v1/modeler/dscm/changeaction/${objectId}/approve`;\r\n  const body = {\r\n    cestamp,\r\n    comment: \"Approved Successfully\",\r\n  };\r\n\r\n  try {\r\n    const response = await callEnoviaWebService(\"PUT\", url, body, headers);\r\n    if (response.status) {\r\n      console.log(\"[approveChangeAction] Approval successful\", response);\r\n      return { success: true, data: response };\r\n    } else {\r\n      let error = response?.message || \"Failed to approve Change Action\";\r\n      console.error(\"[approveChangeAction] Error:\", error);\r\n      return { success: false, error };\r\n    }\r\n  } catch (err) {\r\n    console.error(\"[approveChangeAction] Exception:\", err);\r\n    return { success: false, error: err.message };\r\n  }\r\n}\r\n\r\nasync function waitForCAState(ENOVIA_BASE_URL, objectId, headers, desiredState, maxRetries = 5, delayMs = 1500) {\r\n  for (let i = 0; i < maxRetries; i++) {\r\n    const caDetails = await fetchCACestampDetails(ENOVIA_BASE_URL, objectId, headers);\r\n    const currentState = caDetails?.current?.state;\r\n    console.log(`[waitForCAState] Attempt ${i + 1}: Current state = ${currentState}`);\r\n    \r\n    if (currentState === desiredState) {\r\n      return true;\r\n    }\r\n\r\n    await new Promise((resolve) => setTimeout(resolve, delayMs));\r\n  }\r\n  return false;\r\n}\r\n","// import { useCallback, useState } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { setDroppedObjectData, setLoading } from \"../store/droppedObjectSlice\";\r\n// import { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// // Custom hook\r\n// import usePlantAssignment from \"./usePlantAssignment\";\r\n// // Reusable services\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({\r\n//           dataItems,\r\n//         });\r\n\r\n//         // const cardownerResult = await fetchCardOwnerDetailsService({\r\n//         //   dataItems,\r\n//         //   headers,\r\n//         // });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           // Merge the data from both services\r\n//           // const combineData = {\r\n//           //   cardData: objectDetailsResult.data.cardData,\r\n//           //   ownerData: cardownerResult.data.ownerData,\r\n//           // };\r\n\r\n//           dispatch(\r\n//             setDroppedObjectData({\r\n//               cardData: objectDetailsResult.data.cardData,\r\n//             })\r\n//           );\r\n\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // call usePlantAssignment after successfully fetching object details\r\n//           if (objectDetailsResult) {\r\n//             await handleObsolescenceWidget(\r\n//               draggedObjectData[\"Collaborative Space\"],\r\n//               draggedObjectData[\"Maturity State\"],\r\n//               dataItems[0]?.objectId,\r\n//               dataItems[0]?.objectType,\r\n//               draggedObjectData.Name,\r\n//               draggedObjectData[\"Dropped Revision\"]\r\n//             );\r\n//           }\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       setLoading(true); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         setLoading(false);\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         console.log(\r\n//           \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n//         );\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast]\r\n//   );\r\n//   // Initialize droppable area\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\r\n//         \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n//       );\r\n//       dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n//     } else {\r\n//       console.log(\r\n//         \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n//       );\r\n//     }\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100); // Check every 100ms\r\n\r\n//     return () => clearInterval(interval); // Cleanup interval on unmount\r\n//   }, [handleDrop, dispatch]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({ dataItems });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n//           if (\r\n//             objectType !== \"VPMReference\" &&\r\n//             objectType !== \"Change Action\"\r\n//           ) {\r\n//             showErrorToast(\"Please select CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           await handleObsolescenceWidget(\r\n//             draggedObjectData[\"Collaborative Space\"],\r\n//             draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData.Name,\r\n//             draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   // Define valid types for CA or Engg Item\r\n//   const validTypes = [\r\n//     \"VPMReference\",      // Valid Type 1\r\n//     \"Engg Item\",         // Valid Type 2\r\n//     \"Physical Product\",  // Valid Type 3\r\n//     \"Change Action\",     // Valid Type 4 (CA)\r\n//   ];\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult = await getDroppedObjectDetails({ dataItems });\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n\r\n//           // Check if the object type is valid (Engg Item, Physical Product, VPMReference, or Change Action)\r\n//           if (!validTypes.includes(objectType)) {\r\n//             showErrorToast(\"Please select a CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           // Proceed with setting the dropped object data\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // Call handleObsolescenceWidget after successful validation\r\n//           await handleObsolescenceWidget(\r\n//             draggedObjectData[\"Collaborative Space\"],\r\n//             draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData.Name,\r\n//             draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n////////////////////////////////////////////////original///////////////////////////\r\n\r\n// import { useCallback } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import {\r\n//   setDroppedObjectData,\r\n//   setLoading,\r\n//   setIsDropped as setIsDroppedAction,\r\n// } from \"../store/droppedObjectSlice\";\r\n// import useToast from \"../hooks/useToast\";\r\n// import useObsolescenceWidget from \"./useObsolescenceWidget\";\r\n// import {\r\n//   initializeDroppableArea as initDroppable,\r\n//   getDroppedObjectDetails,\r\n// } from \"../services/api/droppableService\";\r\n// import {\r\n//   MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n//   MSG_UNEXPECTED_ERROR,\r\n// } from \"../utils/toastMessages\";\r\n\r\n// const useObsolescenceDropableArea = () => {\r\n//   const { showErrorToast } = useToast();\r\n//   const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n//   const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n//   const loading = useSelector((state) => state.droppedObject.loading);\r\n//   const dispatch = useDispatch();\r\n\r\n//   // Define valid types for CA or Engg Item\r\n//   const validTypes = [\r\n//     \"VPMReference\",      // Valid Type 1\r\n//     \"Engg Item\",         // Valid Type 2\r\n//     \"Physical Product\",  // Valid Type 3\r\n//     \"Change Action\",     // Valid Type 4 (CA)\r\n//   ];\r\n\r\n//   const fetchObjectDetails = useCallback(\r\n//     async (dataItems) => {\r\n//       try {\r\n//         const objectDetailsResult= await getDroppedObjectDetails({ dataItems });\r\n//         console.log(\"[Object Details Result]:\", objectDetailsResult);\r\n\r\n//         if (objectDetailsResult.success) {\r\n//           const draggedObjectData = objectDetailsResult.data.cardData;\r\n//           console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n//           // ✅ Validate object type before proceeding\r\n//           const objectType = draggedObjectData?.Type;\r\n\r\n//           // Check if the object type is valid (Engg Item, Physical Product, VPMReference, or Change Action)\r\n//           if (!validTypes.includes(objectType)) {\r\n//             showErrorToast(\"Please select a CA or Engg Item.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           const maturityState = draggedObjectData?.[\"Maturity State\"];\r\n//           console.log(\"Maturity state\", maturityState)\r\n\r\n//           if (objectType === \"Change Action\") {\r\n//             const maturityState = draggedObjectData?.[\"Maturity State\"];\r\n//             if (maturityState === \"Completed\") {\r\n//               showErrorToast(\"CA is already completed.\");\r\n//               dispatch(setLoading(false));\r\n//               return;\r\n//             }\r\n//           }\r\n\r\n//           if ((objectType === \"Physical Product\") && (maturityState !== \"Released\")) {\r\n//             showErrorToast(\"Product is not released.\");\r\n//             dispatch(setLoading(false));\r\n//             return;\r\n//           }\r\n\r\n//           // Proceed with setting the dropped object data\r\n//           dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n//           dispatch(setIsDroppedAction(true));\r\n\r\n//           // Call handleObsolescenceWidget after successful validation\r\n//           await handleObsolescenceWidget(\r\n//            // draggedObjectData[\"Collaborative Space\"],\r\n//            // draggedObjectData[\"Maturity State\"],\r\n//             dataItems[0]?.objectId,\r\n//             dataItems[0]?.objectType,\r\n//             draggedObjectData[\"relativePath\"],\r\n//             // draggedObjectData.Name,\r\n//           //  draggedObjectData[\"Dropped Revision\"]\r\n//           );\r\n//         } else {\r\n//           showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n//         showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n//       } finally {\r\n//         dispatch(setLoading(false));\r\n//       }\r\n//     },\r\n//     [dispatch, handleObsolescenceWidget, showErrorToast]\r\n//   );\r\n\r\n//   const handleDrop = useCallback(\r\n//     async (dataItems) => {\r\n//       dispatch(setLoading(true)); // Start loading state\r\n//       console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n//       try {\r\n//         if (dataItems && dataItems.length > 0) {\r\n//           await fetchObjectDetails(dataItems);\r\n//         } else {\r\n//           console.warn(\"[handleDrop] No data items to process.\");\r\n//         }\r\n//       } catch (error) {\r\n//         dispatch(setLoading(false));\r\n//         console.error(\"[Drop] Error in handleDrop:\", error);\r\n//         showErrorToast(MSG_UNEXPECTED_ERROR);\r\n//       }\r\n//     },\r\n//     [fetchObjectDetails, showErrorToast, dispatch]\r\n//   );\r\n\r\n//   const initializeDroppableArea = useCallback(() => {\r\n//     if (!isDropped) {\r\n//       console.log(\"[initializeDroppableArea] 🚀 Resetting isDropped to false...\");\r\n//       dispatch(setIsDroppedAction(false));\r\n//     } else {\r\n//       console.log(\"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\");\r\n//     }\r\n\r\n//     const interval = setInterval(() => {\r\n//       const droppableContainer = document.querySelector(\".droppable-container\");\r\n//       if (droppableContainer) {\r\n//         clearInterval(interval);\r\n//         initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n//       }\r\n//     }, 100);\r\n\r\n//     return () => clearInterval(interval); // Cleanup\r\n//   }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n//   return {\r\n//     initializeDroppableArea,\r\n//     loading,\r\n//     handleDrop,\r\n//   };\r\n// };\r\n\r\n// export default useObsolescenceDropableArea;\r\n\r\n////////////////////////////////////////////////////////////original above//////////////////\r\n\r\nimport { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setLoading,setObselenceObjectData,\r\n  setIsDropped as setIsDroppedAction,\r\n} from \"../store/droppedObjectSlice\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport useObsolescenceWidget from \"./useObsolescenceWidget\";\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst useObsolescenceDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleObsolescenceWidget } = useObsolescenceWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const validTypes = [\"VPMReference\", \"Physical Product\", \"Change Action\"];\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        console.log(\r\n          \"[FetchObjectDetails] Requesting with dataItems:\",\r\n          dataItems\r\n        );\r\n\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        console.log(\"[FetchObjectDetails] API response:\", objectDetailsResult);\r\n\r\n        if (objectDetailsResult.success) {\r\n          const draggedObjectData = objectDetailsResult?.data?.cardData;\r\n          const objectType = draggedObjectData?.Type;\r\n          const maturityState = draggedObjectData?.[\"Maturity State\"];\r\n\r\n          console.log(\"[Dragged Object Type]:\", objectType);\r\n          console.log(\"[Maturity State]:\", maturityState);\r\n\r\n          // if (!validTypes.includes(objectType)) {\r\n          //   showErrorToast(\"Please select a CA or Engg Item.\");\r\n          //   dispatch(setLoading(false));\r\n          //   return;\r\n          // }\r\n\r\n          // if (objectType === \"Change Action\" && maturityState === \"Completed\") {\r\n          //   showErrorToast(\"CA is already completed.\");\r\n          //   dispatch(setLoading(false));\r\n          //   return;\r\n          // }\r\n\r\n          // if (objectType === \"Physical Product\" && maturityState !== \"Released\") {\r\n          //   showErrorToast(\"Product is not released.\");\r\n          //   dispatch(setLoading(false));\r\n          //   return;\r\n          // }\r\n          console.log(\"[Validation] Object Type:\", objectType);\r\n          console.log(\"[Validation] Maturity State:\", maturityState);\r\n          console.log(\r\n            \"[Validation] Is valid type?\",\r\n            validTypes.includes(objectType)\r\n          );\r\n\r\n          if (!validTypes.includes(objectType)) {\r\n            console.log(\"[Validation] Invalid object type error triggered\");\r\n            showErrorToast(\"Please select a CA or Engg Item.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          if (objectType === \"Change Action\" && maturityState === \"Completed\") {\r\n            console.log(\"[Validation] CA completed error triggered\");\r\n            showErrorToast(\"CA is already completed.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          if (\r\n            objectType === \"Physical Product\" &&\r\n            maturityState !== \"Released\"\r\n          ) {\r\n            console.log(\"[Validation] Product not released error triggered\");\r\n            showErrorToast(\"Product is not released.\");\r\n            dispatch(setLoading(false));\r\n            return;\r\n          }\r\n\r\n          dispatch(setDroppedObjectData({ cardData: draggedObjectData }));\r\n          dispatch(setIsDroppedAction(true));\r\n          console.log(\"[FetchObjectDetails] Setting dropped object data:\", draggedObjectData);\r\n          \r\n          await handleObsolescenceWidget(\r\n            draggedObjectData[\"Collaborative Space\"], // collabSpace\r\n            dataItems[0]?.objectId,                   // objectId\r\n            dataItems[0]?.objectType,                 // objectType\r\n            draggedObjectData[\"relativePath\"]         // relativePath\r\n          );          \r\n        } else {\r\n          console.error(\r\n            \"[FetchObjectDetails] API failure:\",\r\n            objectDetailsResult\r\n          );\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Exception:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleObsolescenceWidget, showErrorToast]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      dispatch(setLoading(true));\r\n      console.log(\"[handleDrop] Called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n          dispatch(setLoading(false));\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[handleDrop] Unexpected error:\", error);\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast, dispatch]\r\n  );\r\n\r\n  const initializeDroppableArea = useCallback(() => {\r\n    if (!isDropped) {\r\n      console.log(\"[initializeDroppableArea] Resetting isDropped to false...\");\r\n      dispatch(setIsDroppedAction(false));\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [handleDrop, dispatch, isDropped, showErrorToast]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useObsolescenceDropableArea;\r\n","import React, { useState } from \"react\";\r\n\r\nconst MassUpdateDropdown = ({\r\n  editableColumns,\r\n  selectedRows,\r\n  onApplyUpdate,\r\n  valueOptions,\r\n  onClose, // New prop to close dropdown\r\n}) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(\"\");\r\n\r\n  const handleApplyUpdate = (applyToAll) => {\r\n    if (!selectedColumn || !selectedValue) {\r\n      alert(\"Please select a column and a value.\");\r\n      return;\r\n    }\r\n\r\n    onApplyUpdate(\r\n      selectedColumn,\r\n      selectedValue,\r\n      applyToAll ? \"all\" : \"selected\"\r\n    );\r\n    onClose(); // Close after applying update\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"dropdown-menu p-3 \"\r\n      style={{ width: \"300px\", display: \"block\" }}\r\n    >\r\n      <label>Select Column:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        onChange={(e) => setSelectedColumn(e.target.value)}\r\n        value={selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Column --</option>\r\n        {editableColumns.map((col) => (\r\n          <option key={col} value={col}>\r\n            {col}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <label>Select Value:</label>\r\n      <select\r\n        className=\"form-select mb-2\"\r\n        value={selectedValue}\r\n        onChange={(e) => setSelectedValue(e.target.value)}\r\n        disabled={!selectedColumn}\r\n      >\r\n        <option value=\"\">-- Select Value --</option>\r\n        {valueOptions.map((val) => (\r\n          <option key={val} value={val}>\r\n            {val}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <button\r\n        className=\"btn btn-outline-success me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(false)}\r\n        disabled={!selectedRows.length}\r\n        style={{ cursor: !selectedRows.length ? \"not-allowed\" : \"pointer\" }}\r\n      >\r\n        Apply to Selected\r\n      </button>\r\n      <button\r\n        className=\"btn btn-outline-primary me-2 mb-2\"\r\n        onClick={() => handleApplyUpdate(true)}\r\n      >\r\n        Apply to All\r\n      </button>\r\n\r\n      {/* Close Button */}\r\n      <button className=\"btn btn-outline-danger me-2 mb-2\" onClick={onClose}>\r\n        Close\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MassUpdateDropdown;\r\n","// import { useState } from \"react\";\r\n// import Popup from \"../../components/Popup/Popup\";\r\n// import useToast from \"../../hooks/useToast\";\r\n// import { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\n// import MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\n// const ObsolescenceWidgetToolbarNativeCta = ({\r\n//   onSave,\r\n//   state,\r\n//   selectedRows,\r\n//   tableData,\r\n//   onMassUpdate,\r\n//   type,\r\n//   latestRevision,\r\n//   droppedRevision,\r\n// }) => {\r\n//   const { showWarningToast } = useToast();\r\n//   const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n//   const handleSaveClick = () => {\r\n//     if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n//       showWarningToast(MSG_BOS_SAVE);\r\n//     } else {\r\n//       onSave();\r\n//     }\r\n//     // When save button is clicked, call onSave passed as prop\r\n//     // onSave is passed with tableData from parent\r\n//   };\r\n//   const handleMassUpdate = (column, value, scope) => {\r\n//     if (scope === \"selected\") {\r\n//       onMassUpdate(selectedRows, column, value);\r\n//     } else {\r\n//       onMassUpdate(tableData, column, value);\r\n//     }\r\n//   };\r\n//   const editableColumns = [\r\n//     \"Print On Purchase Order Required\",\r\n//     \"Print On Work Order Required\",\r\n//     \"Work Order Document Required\",\r\n//     \"Print On report Order Required\",\r\n//     \"SAP/JDE\",\r\n//   ];\r\n\r\n//   return (\r\n//     <div className=\"d-flex flex-column cta-absolute\">\r\n//       <div className=\"d-flex\">\r\n//         <button\r\n//           className=\"btn btn-outline-success btn-lg m-2\"\r\n//           // onClick={handleSaveClick}\r\n//         >\r\n//           Obsolete\r\n//         </button>\r\n//         {/* <button\r\n//           className=\"btn btn-outline-primary btn-lg m-2\"\r\n//           onClick={() =>\r\n//             type !== \"Document\" && latestRevision !== droppedRevision\r\n//               ? showWarningToast(MSG_BOS_SAVE)\r\n//               : setShowDropdown((prev) => !prev)\r\n//           }\r\n//         >\r\n//           Mass Update\r\n//         </button> */}\r\n//       </div>\r\n\r\n//       {/* Dropdown appears below */}\r\n//       {showDropdown && (\r\n//         <div className=\"mt-2\">\r\n//           <MassUpdateDropdown\r\n//             editableColumns={editableColumns}\r\n//             selectedRows={selectedRows}\r\n//             onApplyUpdate={handleMassUpdate}\r\n//             valueOptions={[\"Yes\", \"No\"]}\r\n//             onClose={() => setShowDropdown(false)}\r\n//           />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ObsolescenceWidgetToolbarNativeCta;\r\n\r\n\r\nimport { useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_BOS_SAVE } from \"../../utils/toastMessages\";\r\nimport MassUpdateDropdown from \"./MassUpdateDropdown\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useObsolescenceWidget from \"../../hooks/useObsolescenceWidget\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {fetchEnoviaWebService} from \"../../utils/helpers\";\r\n\r\nconst ObsolescenceWidgetToolbarNativeCta = ({\r\n  onSave,\r\n  state,\r\n  selectedRows,\r\n  tableData,\r\n  onMassUpdate,\r\n  type,\r\n  latestRevision,\r\n  droppedRevision,\r\n  ParentItemState,\r\n  cardData\r\n}) => {\r\n  const { showWarningToast, showErrorToast } = useToast();\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n  const{obsoleteStateChecking} = useObsolescenceWidget()\r\n  const parentObjectData = useSelector(\r\n    (state) => state.droppedObject?.obselenceObjectData?.parentObjectData || []\r\n  );\r\n  const handleSaveClick = () => {\r\n    if (type !== \"Document\" && latestRevision !== droppedRevision) {\r\n      showWarningToast(MSG_BOS_SAVE);\r\n    } else {\r\n      onSave();\r\n    }\r\n  };\r\n\r\n  console.log(\"cardData from Parent component\", cardData)\r\n  // const handleObsoleteClick = () => {\r\n  //   // Show the new toast\r\n  //   showWarningToast(\"Product is not yet released\");\r\n\r\n  //   // Preserve original save logic\r\n  //   handleSaveClick();\r\n  // };\r\n\r\n  const handleObsoleteClick = async () => {\r\n    console.log(\"Parent Object Data:\", parentObjectData);\r\n    if(parentObjectData){\r\n      const hasUnreleasedItems = parentObjectData.some(item => item?.state !== \"RELEASED\");\r\n      const hasInvalidChangeIntent = parentObjectData.some(\r\n        item => item?.changeIntent[0]?.what !== \"ChangeMaturityObsolete\"\r\n      );\r\n\r\n      if (hasUnreleasedItems) {\r\n        showErrorToast(\"All items must be in 'RELEASED' state.\");\r\n        return;\r\n      } else if (hasInvalidChangeIntent) {\r\n        showErrorToast(\"All items must have ChangeIntent: 'ChangeMaturityObsolete'.\");\r\n        return;\r\n      }\r\n      await obsoleteStateChecking(parentObjectData, cardData);\r\n\r\n      const headers = await fetchCsrfToken();\r\n      let id = cardData?.cardData?.['Dropped Revision ID'];\r\n      let response;\r\n      const apiURL =`https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/${id}/dslc:changeControl?$mask=dsmvlc:ChangeControlMask.Status`;\r\n      await fetchEnoviaWebService(\"GET\",apiURL,{}, headers).then (async (apiResponse) => {\r\n        console.log(\"API Response:\", apiResponse);\r\n        if (apiResponse.status === true) {\r\n          let changeControlStatus = JSON.parse(apiResponse.data).member[0]?.['Change Control Status'];\r\n          if (changeControlStatus !== \"ANY\" && changeControlStatus !== undefined){\r\n            const changeactionapiURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${changeControlStatus}?$fields=proposedChanges`;\r\n            await fetchEnoviaWebService (\"GET\", changeactionapiURL,{}, headers).then(async (changeactionResponse) => {\r\n              console.log(\"changeactionResponse:\", changeactionResponse);\r\n              if (changeactionResponse.status === true) {\r\n                let res= JSON.parse(changeactionResponse.output);\r\n                if( res.proposedChanges[0].whats[0].what === \"ChangeMaturityObsolete\" ){\r\n                  console.log(\"what response is\",res.proposedChanges[0].whats[0].what);\r\n                }else{\r\n                  console.log(\"ress\",res.proposedChanges)\r\n                  }\r\n                }\r\n        }).catch((error) => {\r\n          console.log(\"Error in catch\", error);\r\n          response = error;\r\n          showErrorToast(\"Something went wrong\");\r\n          return response;\r\n        });\r\n          }else {\r\n            showErrorToast(\"something went wrong changecontrol status is not correct\");\r\n          }\r\n    }\r\n   \r\n  }).catch((error) => {\r\n    console.log(\"Error in catch\", error);\r\n    response = error;\r\n    showErrorToast(\"Something went wrong....\");\r\n    return response;\r\n  });\r\n    \r\n    }\r\n  };\r\n  const handleMassUpdate = (column, value, scope) => {\r\n    if (scope === \"selected\") {\r\n      onMassUpdate(selectedRows, column, value);\r\n    } else {\r\n      onMassUpdate(tableData, column, value);\r\n    }\r\n  };\r\n\r\n  const editableColumns = [\r\n    \"Print On Purchase Order Required\",\r\n    \"Print On Work Order Required\",\r\n    \"Work Order Document Required\",\r\n    \"Print On report Order Required\",\r\n    \"SAP/JDE\",\r\n  ];\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column cta-absolute\">\r\n      <div className=\"d-flex\">\r\n        <button\r\n          className=\"btn btn-outline-success btn-lg m-2\"\r\n          onClick={handleObsoleteClick}\r\n        >\r\n          Obsolete\r\n        </button>\r\n        {/* <button\r\n          className=\"btn btn-outline-primary btn-lg m-2\"\r\n          onClick={() =>\r\n            type !== \"Document\" && latestRevision !== droppedRevision\r\n              ? showWarningToast(MSG_BOS_SAVE)\r\n              : setShowDropdown((prev) => !prev)\r\n          }\r\n        >\r\n          Mass Update\r\n        </button> */}\r\n      </div>\r\n\r\n      {showDropdown && (\r\n        <div className=\"mt-2\">\r\n          <MassUpdateDropdown\r\n            editableColumns={editableColumns}\r\n            selectedRows={selectedRows}\r\n            onApplyUpdate={handleMassUpdate}\r\n            valueOptions={[\"Yes\", \"No\"]}\r\n            onClose={() => setShowDropdown(false)}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ObsolescenceWidgetToolbarNativeCta;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./ObsolescenceWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {   formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns } from \"./ObsolescencedataHelper\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\nimport ObsolescenceWidgetToolbarNativeCta from \"../ObsolescenceWidget/ObsolescenceWidgetToolbarNativeCta\";\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst ObsolescenceWidget = () => {\r\n  const { initializeDroppableArea, loading } = useObsolescenceDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [specData, setSpecData] = useState([]);\r\n  const [selectableRows, setSelectableRows] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  // Get redux data\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const bosData = useSelector((state) => state.droppedObject.BOSObjectData);\r\n  const bosSpecDocument = useSelector(\r\n    (state) => state.droppedObject.BOSObjectData?.specDocument || []\r\n  );\r\n  const parentObjectData = useSelector(\r\n    (state) => state.droppedObject?.obselenceObjectData?.parentObjectData || []\r\n  );\r\n\r\n  // Derive type and state from droppedObjectData if present\r\n  let state, type;\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    state = droppedObjectData.cardData[\"Maturity State\"];\r\n    type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n  console.log(\"droppedObjectData.initialDraggedData?.data\", droppedObjectData.initialDraggedData?.data)\r\n  console.log(\"Type of Parent:\", type);\r\n\r\n  useEffect(() => {\r\n    if (specData.length) {\r\n      setTableData(specData.map((item) => ({ ...item, changedCells: {} })));\r\n    }\r\n  }, [specData]);\r\n\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  const newTableData = useMemo(() => getTableData(parentObjectData, type), [\r\n    parentObjectData,\r\n    type,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    setSpecData(newTableData);\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1);\r\n    }\r\n  }, [newTableData]);\r\n\r\n  const cardData = useMemo(() => getCardData(droppedObjectData), [\r\n    droppedObjectData,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  const columns = useMemo(\r\n    () =>\r\n      tableColumns(\r\n        type,\r\n        droppedObjectData?.cardData[\"Latest Revision\"],\r\n        droppedObjectData?.cardData[\"Dropped Revision\"]\r\n      ),\r\n    [type, droppedObjectData?.cardData]\r\n  );\r\n\r\n  console.log(\"In Widget columns\", columns)\r\n  // ...rest of your functions like handleSave, handleMassUpdate, updateTableData etc.\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea();\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    );\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n    setTableData([]);\r\n    setIsCardDataAvailable(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && (\r\n        <div className=\"loading-overlay\">\r\n          <Loader />\r\n          <p>Saving...</p>\r\n        </div>\r\n      )}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n      {loading && <Loader />}\r\n      {isDropped && (\r\n        <>\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"ObsolescenceWidget\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <div className=\"wrapper-cta\">\r\n              <ObsolescenceWidgetToolbarNativeCta\r\n                onSave={() => console.log(\"Save function here\")} // replace with handleSave\r\n                type={type}\r\n                latestRevision={droppedObjectData?.cardData[\"Latest Revision\"]}\r\n                droppedRevision={droppedObjectData?.cardData[\"Dropped Revision\"]}\r\n                selectedRows={selectedTableRows}\r\n                state={state}\r\n                tableData={selectableRows}\r\n                onMassUpdate={() => console.log(\"Mass update clicked\")} // replace with handleMassUpdate\r\n                cardData={droppedObjectData}\r\n              />\r\n              <ReusableTable\r\n                key={tableKey}\r\n                data={tableData}\r\n                columns={columns}\r\n                meta={{ updateTableData: (data) => console.log(\"updateTableData called\", data) }} // replace with updateTableData\r\n                type={type}\r\n                latestRevision={droppedObjectData?.cardData[\"Latest Revision\"]}\r\n                droppedRevision={droppedObjectData?.cardData[\"Dropped Revision\"]}\r\n                widgetType=\"Obsolescence_Attribute_Widget\"\r\n                disableSelection={true}  \r\n              />\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ObsolescenceWidget;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\nimport {callEnoviaWebService} from \"../../utils/helpers\";\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants?.length >0 ? plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      )): 'N/A'}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\n// export const getTableData = (tableData, type, CAData) => {\r\n//   console.log(\"cadata datahelpers\",CAData );\r\n  \r\n//   if (!tableData) return [];\r\n\r\n//   return tableData.map((data) => {\r\n//     if (type === \"Change Action\") {\r\n//       return {\r\n//         ItemName: data?.ItemTitle || \"N/A\",\r\n//         Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n//         ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n//       };\r\n//     } else {\r\n//       console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n//       return {\r\n//         Plant: data?.title || \"N/A\",\r\n//         Seq: data?.Seq || \"1\",\r\n//         Status: data?.PlantStatus || \"Pending\",\r\n//         \"MFG Change\": data?.MFGChange || \"N/A\",\r\n//         \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n//         Change: data?.Change || CAData.CAName ||\"N/A\",\r\n//         \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n//         \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n//         \"ERP Status\": \"Active\" || \"N/A\",\r\n//         \"ERP Export\": \"Yes\" || \"N/A\",\r\n//         \"Lead Plant\": false,\r\n//         MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n//         \"Sort Value\": \"\",\r\n//       };\r\n//     }\r\n//   });\r\n// };\r\n\r\nexport const getTableData = (tableData, type) => {\r\n  if (!tableData) return [];\r\n\r\n  const revisionMap = {};\r\n  console.log(\"tableDta in table data helper\", tableData);\r\n  // Extracting Revision and State from instance response\r\n  // if (instanceResponse?.member?.length) {\r\n  //   instanceResponse.member.forEach((item) => {\r\n  //     const instance = item?.[\"dseng:EngInstance\"]?.member?.[0];\r\n  //     const parentId = instance?.parentObject?.identifier;\r\n  //     const name = instance?.name || \"\";\r\n\r\n  //     // Extract revision as the part after the last dot (e.g., \".1\")\r\n  //     const revision = name.split(\".\").pop();\r\n  //     revisionMap[parentId] = {\r\n  //       revision,\r\n  //       state: \"N/A\", // Add logic here if you have a way to extract 'state'\r\n  //     };\r\n  //   });\r\n  // }\r\n\r\n  return tableData.map((data) => {\r\n    const parentId = data?.ItemId || data?.id;\r\n    const revisionData = revisionMap[parentId] || { revision: \"N/A\", state: \"N/A\" };\r\n\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        \"Parent Item Name\": data.title || \"N/A\",\r\n        Plant: data?.ItemPlants || \"N/A\",\r\n        \"Parent Item Revision\": data.revision,\r\n        \"Parent Item State\": data.state,\r\n        \"Change\": data?.changeIntent[0]?.what || \"N/A\"\r\n      };\r\n    } else {\r\n      return {\r\n        \"Parent Item Name\": data.title,\r\n        Plant: data?.title || \"N/A\",\r\n        \"Parent Item Revision\": data.revision,\r\n        \"Parent Item State\": data.state,\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = ( type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"Parent Item Name\", header: \"Parent Item Name\" },\r\n      { \r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        // cell: ({ row }) => (\r\n        //   <PlantRenderer\r\n        //     plants={row.original.Plant} // ✅ Uses correct row data\r\n        //     itemId={row.original.ItemId} // ✅ Passes item ID\r\n        //     isRemoveMode={isRemoveMode}\r\n        //     handleRemovePlant={handleRemovePlant}\r\n        //   />\r\n        // ),\r\n      },\r\n      { accessorKey: \"Parent Item Revision\", header: \"Parent Item Revision\" },\r\n      { accessorKey: \"Parent Item State\", header: \"Parent Item State\" },\r\n      { accessorKey: \"Change\", header: \"Change\" },\r\n    ];\r\n  }\r\n\r\n  // return [\r\n  //   { accessorKey: \"Plant\", header: \"Plant\"},\r\n  //   { accessorKey: \"Seq\", header: \"Seq\" },\r\n  //   { accessorKey: \"Status\", header: \"Status\" },\r\n  //   { accessorKey: \"Change\", header: \"Change\" },\r\n  //   { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n  //   { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n  //   { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n  //   { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n  //   {\r\n  //     accessorKey: \"MBom\",\r\n  //     header: \"MBom\",\r\n      \r\n  //   },\r\n  //   { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n  //   { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n  //   { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n  //   { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  // ];\r\n\r\n  return [\r\n    \r\n    { accessorKey: \"Parent Item Name\", header: \"Parent Item Name\"},\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Parent Item Revision\", header: \"Parent Item Revision\" },\r\n    { accessorKey: \"Parent Item State\", header: \"Parent Item State\" },\r\n  ];\r\n  \r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport async function getAssignedClasses(identifier, headers) {\r\n  const plantIdData = [];\r\n \r\n  const url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n \r\n    if (\r\n      itemResponse.output.member &&\r\n      itemResponse.output.member[0].ClassificationAttributes\r\n    ) {\r\n      itemResponse.output.member[0].ClassificationAttributes.member.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantId\")) {\r\n              plantName = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"ERPStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (plantName !== null) {\r\n            plantIdData.push({\r\n              PlantName: plantName,\r\n              PlantID: classId,\r\n              PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n            });\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return plantIdData;\r\n}\r\n\r\nexport async function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/7D56FB4BAE741300682C5271000001CF?mask=dsmveng%3AEngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nexport async function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia\",\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      JSON.stringify(Body),\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of response.output.results) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nexport async function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_REFRESH_ERROR,\r\n  MSG_REFRESH_SUCCESS,\r\n} from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useObsolescenceDropableArea from \"../../hooks/useObsolescenceDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useObsolescenceDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader /> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\n// import WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport ObsolescenceWidget from \"./ObsolescenceWidget\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <ObsolescenceWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\r\n      \"⚠️ [index.js] Unable to inject script—parent window not accessible.\"\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["DragAndDropComponent","handleDrop","useDroppableArea","performSearch","useInterComSearch","_jsx","_Fragment","children","_jsxs","className","Image","style","width","height","src","alt","SearchInput","onSearch","searchText","title","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","length","id","objectId","objectType","console","warn","useObsolescenceWidget","showErrorToast","useToast","dispatch","useDispatch","ENOVIA_BASE_URL","process","email","window","widget","getValue","log","approveCA","async","setLoading","headers","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","caDetails","fetchCACestampDetails","cestamp","response","url","concat","body","comment","callEnoviaWebService","status","success","data","error","message","err","approveChangeAction","handleObsolescenceWidget","collabSpace","type","relativePath","setObselenceObjectData","parentObjectData","tableOfArrayData","setParentDetailsLoading","ChildObject","locateApi","output","_ChildObject$output","_ChildObject$output$m","member","map","items","_items$parentObject","_items$parentObject2","push","parentObject","source","revisionStateData","promises","revisionState","apiPath","_revisionState$output","Promise","all","isMFGCA","ItemDetails","fetchChangeActionData","CAURL","i","_response$output","_response$output$prop","proposedChanges","change","where","responseofTable","_responseofTable$outp","_objectSpread","changeIntent","whats","CAAllPlantsData","allPlants","getAllPlants","setCAAllPlants","CAcestampDetails","setCACestampDetails","setCAItemDetails","setIsMFGCA","setCAHeaders","userGroupCollab","getUserGroupCollab","allCollabSpaces","plants","fetchAssignedPlants","plantData","setHeaders","getProductChildren","fetchProductChildren","setProductChildren","state","getCaDetails","fetchCADetails","setCAName","setProposedChanges","setCAData","CAData","obsoleteStateChecking","tableData","droppedObjectData","_droppedObjectData$in","_itemGroupId$items$","itemGroupId","initialDraggedData","locateParentObjectsArray","finalObsoleteStatusArray","item","locateApiResponse","_locateApiResponse$ou","_engInstances$dsengE","locateParentObject","j","parentMembers","_item$parentObject","_item$parentObject2","_revisionState$output2","obsoleteStateData","hasObsolete","every","cardData","stateChange","ready","desiredState","maxRetries","arguments","undefined","delayMs","_caDetails$current","currentState","current","resolve","setTimeout","waitForCAState","response1","baseURL","referencedObjects","identifier","nextState","JSON","stringify","maturityState","maturityChangeApi","_maturityState$output","errorMessage","messages","useObsolescenceDropableArea","isDropped","useSelector","droppedObject","loading","validTypes","fetchObjectDetails","useCallback","dataItems","objectDetailsResult","getDroppedObjectDetails","_objectDetailsResult$","_dataItems$","_dataItems$2","draggedObjectData","Type","includes","setDroppedObjectData","setIsDroppedAction","MSG_FETCH_OBJECT_DETAILS_FAILED","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","_ref","editableColumns","selectedRows","onApplyUpdate","valueOptions","onClose","selectedColumn","setSelectedColumn","useState","selectedValue","setSelectedValue","handleApplyUpdate","applyToAll","alert","display","onChange","e","target","value","col","disabled","val","onClick","cursor","onSave","onMassUpdate","latestRevision","droppedRevision","ParentItemState","showWarningToast","showDropdown","setShowDropdown","_state$droppedObject","_state$droppedObject$","obselenceObjectData","_cardData$cardData","hasUnreleasedItems","some","hasInvalidChangeIntent","_item$changeIntent$","what","apiURL","fetchEnoviaWebService","then","apiResponse","_JSON$parse$member$","changeControlStatus","parse","changeactionapiURL","changeactionResponse","res","catch","MassUpdateDropdown","handleMassUpdate","column","scope","ObsolescenceWidget","_droppedObjectData$in3","tableKey","setTableKey","setTableData","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","specData","setSpecData","selectableRows","setSelectableRows","showSuccessToast","selectedTableRows","loadingParentDetails","BOSObjectData","specDocument","_state$droppedObject$2","_droppedObjectData$in2","useEffect","changedCells","newTableData","useMemo","getTableData","_data$changeIntent$","ItemId","Plant","ItemPlants","revision","prevKey","Title","owner","Owner","Description","imageURL","EIN","getCardData","columns","tableColumns","accessorKey","header","Loader","handleHomeClick","setIsDropped","parentDetails","versions","setPlantObjectData","initialAssignedPlants","uniquePlants","productChildren","CAName","CardWithDragAndDrop","widgetType","ObsolescenceWidgetToolbarNativeCta","ReusableTable","meta","updateTableData","disableSelection","WidgetLifecycle","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}