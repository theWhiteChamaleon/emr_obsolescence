{"version":3,"file":"static/js/328.90f6b27e.chunk.js","mappings":"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","sources":["components/Popup/Popup.jsx","pages/plantAssignment/dataHelpers.js","services/api/PlantAssignment/saveTableDataService.js"],"sourcesContent":["import React, {\r\n  useState,\r\n  useMemo,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  forwardRef,\r\n} from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst AvailablePlant = forwardRef(\r\n  ({ data, columns, addedItem, CAName, state }, ref) => {\r\n    const { showWarningToast } = useToast();\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    useEffect(() => {\r\n      setRowSelection({}); // Reset selection when data changes\r\n    }, [data]);\r\n\r\n    const addPlant = () => {\r\n      const selectedRows = table.getSelectedRowModel().rows;\r\n      const selectedItems = selectedRows.map(\r\n        (item) => item.original[\"Available Plant\"]\r\n      );\r\n\r\n      if (selectedItems.length === 0) {\r\n        showWarningToast(MSG_EMPTYADD_ERROR);\r\n        return;\r\n      }\r\n\r\n      addedItem(selectedItems); // Send selected items to parent\r\n      setRowSelection({}); // Reset selection\r\n    };\r\n\r\n    // Expose the addPlant function to parent\r\n    useImperativeHandle(ref, () => ({\r\n      addPlant,\r\n    }));\r\n\r\n    const enhancedColumns = useMemo(() => {\r\n      const selectionColumn = {\r\n        id: \"select\",\r\n        cell: ({ row }) => (\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={row.getIsSelected()}\r\n            onChange={row.getToggleSelectedHandler()}\r\n          />\r\n        ),\r\n      };\r\n      return [selectionColumn, ...columns];\r\n    }, [columns]);\r\n\r\n    const table = useReactTable({\r\n      data,\r\n      columns: enhancedColumns,\r\n      state: { rowSelection },\r\n      enableRowSelection: true,\r\n      onRowSelectionChange: setRowSelection,\r\n      getCoreRowModel: getCoreRowModel(),\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-primary me-3\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(true));\r\n            }}\r\n          >\r\n            Select All\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-secondary\"\r\n            onClick={() => {\r\n              table\r\n                .getRowModel()\r\n                .rows.forEach((row) => row.toggleSelected(false));\r\n            }}\r\n          >\r\n            Deselect All\r\n          </button>\r\n        </div>\r\n\r\n        {table.getRowModel().rows.length > 0 ? (\r\n          <div className=\"overflow-auto\" style={{ maxHeight: \"60vh\" }}>\r\n            {table.getRowModel().rows.map((row) => (\r\n              <div\r\n                key={row.id}\r\n                className=\"p-3 border-bottom d-flex align-items-center\"\r\n                style={{\r\n                  backgroundColor: row.getIsSelected() ? \"#d5e8f2\" : \"inherit\",\r\n                }}\r\n              >\r\n                <div className=\"me-3\">\r\n                  {flexRender(\r\n                    row.getVisibleCells()[0].column.columnDef.cell,\r\n                    row.getVisibleCells()[0].getContext()\r\n                  )}\r\n                </div>\r\n                <div>{row.original[columns[0].accessorKey]}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-muted p-3\">No data available</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default AvailablePlant;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport { AiOutlineClose } from \"react-icons/ai\"; // Ant Design Icons (React Icons)\r\n\r\nexport const PlantRenderer = ({\r\n  plants = [],\r\n  itemId,\r\n  isRemoveMode,\r\n  handleRemovePlant,\r\n}) => {\r\n  console.log(\"PlantRenderer received plants:\", plants); // Debugging\r\n  if (!plants?.length) return \"N/A\";\r\n\r\n  return (\r\n    <>\r\n      {plants.map((plant) => (\r\n        <span\r\n          key={plant.PlantID}\r\n          style={{\r\n            marginRight: \"8px\",\r\n            display: \"inline-flex\",\r\n            alignItems: \"center\",\r\n            color: plant.color || \"black\", // Apply red or green based on color property\r\n            fontWeight: \"bold\", // Optional: Make it more visible\r\n          }}\r\n        >\r\n          {plant.PlantName}\r\n          {isRemoveMode && plant.PlantERPStatus === \"Pending\" && (\r\n            <AiOutlineClose\r\n              size={16}\r\n              style={{ cursor: \"pointer\", color: \"red\", marginLeft: \"4px\" }}\r\n              onClick={() => handleRemovePlant(itemId, plant.PlantID)}\r\n            />\r\n          )}\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (tableData, type, CAData) => {\r\n  console.log(\"cadata datahelpers\",CAData );\r\n  \r\n  if (!tableData) return [];\r\n\r\n  return tableData.map((data) => {\r\n    if (type === \"Change Action\") {\r\n      return {\r\n        ItemName: data?.ItemTitle || \"N/A\",\r\n        Plant: data?.ItemPlants || [], // ✅ Ensure Plant data is correctly stored\r\n        ItemId: data?.ItemId || \"N/A\", // ✅ Added to be accessible in `tableColumns`\r\n      };\r\n    } else {\r\n      console.log(\"change data datahelper\", data?.Change || CAData.CAName ||\"N/A\");\r\n       \r\n      return {\r\n        Plant: data?.title || \"N/A\",\r\n        Seq: data?.Seq || \"1\",\r\n        Status: data?.PlantStatus || \"Pending\",\r\n        \"MFG Change\": data?.MFGChange || \"N/A\",\r\n        \"MFG Status\": data?.MFGStatus || \"N/A\",\r\n        Change: data?.Change || CAData.CAName ||\"N/A\",\r\n        \"Change Status\": data?.ChangeStatus || CAData.CAStatus ||\"N/A\",\r\n        \"Oracle Template\": data.OracleTemplate || \"N/A\",\r\n        \"ERP Status\": \"Active\" || \"N/A\",\r\n        \"ERP Export\": \"Yes\" || \"N/A\",\r\n        \"Lead Plant\": false,\r\n        MBom: data.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n        \"Sort Value\": \"\",\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName, type, isRemoveMode, handleRemovePlant) => {\r\n  console.log(\"type here is: \", type);\r\n  if (type === \"Change Action\") {\r\n    return [\r\n      { accessorKey: \"ItemName\", header: \"Item Name\" },\r\n      { \r\n        accessorKey: \"Plant\",\r\n        header: \"Plant\",\r\n        cell: ({ row }) => (\r\n          <PlantRenderer\r\n            plants={row.original.Plant} // ✅ Uses correct row data\r\n            itemId={row.original.ItemId} // ✅ Passes item ID\r\n            isRemoveMode={isRemoveMode}\r\n            handleRemovePlant={handleRemovePlant}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  return [\r\n    { accessorKey: \"Plant\", header: \"Plant\"},\r\n    { accessorKey: \"Seq\", header: \"Seq\" },\r\n    { accessorKey: \"Status\", header: \"Status\" },\r\n    { accessorKey: \"Change\", header: \"Change\" },\r\n    { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n    { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n    { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n    { accessorKey: \"Oracle Template\", header: \"Oracle\" },\r\n    {\r\n      accessorKey: \"MBom\",\r\n      header: \"MBom\",\r\n      \r\n    },\r\n    { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n    { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n    { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n    { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n  ];\r\n};\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import axios from \"axios\";\r\nimport { fetchData, loadWAFData } from \"../../../utils/helpers\";\r\n \r\n// Function to extract IDs from titles\r\nconst extractIdsFromTitles = (data, allPlants) => {\r\n  console.log(\"Data Received for ID Extraction:\", data);\r\n  console.log(\"[PlantAssignment] All Plants Data:\", allPlants);\r\n \r\n  const newClasses = data\r\n    .map((item) => {\r\n      const itemTitle = item.title.replace(/\\s+/g, \"\").replace(/plant/i, \"\");\r\n \r\n      const matchedPlant = allPlants.find((plant) => {\r\n        const plantTitle = plant.title\r\n          .replace(/\\s+/g, \"\")\r\n          .replace(/plant/i, \"\");\r\n        return plantTitle.toLowerCase() === itemTitle.toLowerCase();\r\n      });\r\n \r\n      return matchedPlant ? matchedPlant.id : null;\r\n    })\r\n    .filter((id) => id !== null);\r\n  // Remove null values (non-matching titles)\r\n \r\n  console.log(\"Extracted IDs (newClasses):\", newClasses);\r\n  return newClasses;\r\n};\r\n \r\nexport const handleRemoveData = async (\r\n  allPlants,\r\n  removedTitles,\r\n  productId,\r\n  type\r\n) => {\r\n  console.log(\"allPlants\", allPlants);\r\n  console.log(\"removedTitles\", removedTitles);\r\n  const rowstoDelete = extractIdsFromTitles(removedTitles, allPlants);\r\n  // console.log(\"newClasses handleRemoveData\",newClasses);\r\n \r\n  if (rowstoDelete.length > 0) {\r\n    let declassifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n    let classifybody = {\r\n      id: productId,\r\n      type: type,\r\n      classes: rowstoDelete,\r\n    };\r\n    const declassifyResponse = await fetchData(\r\n       \"POST\",\r\n      declassifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n  }\r\n};\r\n \r\n// Updated handleAddData function\r\nexport const handleAddData = async (\r\n  data,\r\n  allPlants,\r\n  objectId,\r\n  type,\r\n  proposedChanges,\r\n  productChilds,\r\n  hasMBOM\r\n) => {\r\n  console.log(\"Data Received for handleAddData:\", data);\r\n \r\n  // Step 1: Convert incoming data (titles) to class IDs\r\n  const newClasses = extractIdsFromTitles(data, allPlants);\r\n  console.log(\"newClasses before filtering:\", newClasses);\r\n  console.log(\"productChilds\", productChilds);\r\n \r\n  // Step 2: Filter productChilds that are released but not being modified\r\n  const NotPropagableChilds = productChilds.filter((prodChild) => {\r\n    if (prodChild.state.toLowerCase() === \"released\") {\r\n      const change = proposedChanges.find(\r\n        (change) =>\r\n          change.identifier === prodChild.id &&\r\n          change.action.toLowerCase() === \"modify\"\r\n      );\r\n      return !change;\r\n    }\r\n    return false;\r\n  });\r\n \r\n  console.log(\"NotPropagableChilds ARE:\", NotPropagableChilds);\r\n \r\n  // Step 3: Prepare Error Object\r\n  const ErrorObject = [];\r\n \r\n  newClasses.forEach((classId) => {\r\n    const missingIn = NotPropagableChilds.filter(\r\n      (child) => !child.classes.includes(classId)\r\n    )\r\n      .map((child) => child.name)\r\n      .join(\", \");\r\n \r\n    if (missingIn !== \"\" && missingIn !== \"Undefined\") {\r\n      ErrorObject.push({ ClassID: classId, Childs: missingIn });\r\n    }\r\n  });\r\n  console.log(\"error object savetable\", ErrorObject);\r\n \r\n  // Step 4: Generate Final Messages\r\n  let Finalmessage = \"\";\r\n  ErrorObject.forEach((item) => {\r\n    const classTitle = allPlants.find(\r\n      (plant) => plant.id === item.ClassID\r\n    )?.title;\r\n    const message = `Unable to classify product in ${classTitle} due to unclassified child items: ${item.Childs}`;\r\n    Finalmessage += `${message}\\n`;\r\n  });\r\n \r\n  console.log(\"Final Message:\\n\", Finalmessage);\r\n \r\n  // Step 5: Filter out newClasses that are present in ErrorObject\r\n  const filteredNewClasses = newClasses.filter(\r\n    (id) => !ErrorObject.some((item) => item.ClassID === id)\r\n  );\r\n  console.log(\r\n    \"Filtered New Classes (excluding errored ones):\",\r\n    filteredNewClasses\r\n  );\r\n \r\n  // Make the API call if newClasses is not empty\r\n  if (filteredNewClasses.length > 0) {\r\n    const classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n    const classifybody = {\r\n      id: objectId, // Use objectId from Redux\r\n      type: type, // Use type from Redux\r\n      classes: filteredNewClasses,\r\n      mode: \"classifyParent\",\r\n    };\r\n \r\n    console.log(\"Classify API Body:\", classifybody);\r\n \r\n    try {\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"Classify Response:\", JSON.stringify(classifyResponse));\r\n    } catch (error) {\r\n      console.error(\"Error in Classify API Call:\", error);\r\n    }\r\n  }\r\n\r\n  if (\r\n    filteredNewClasses.length > 0 &&\r\n    productChilds.length > 0 &&\r\n    type === \"VPMReference\" &&\r\n    hasMBOM\r\n  ) {\r\n    let classifyUrl =\r\n      \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n    let classifybody = {\r\n      id: objectId,\r\n      type: type,\r\n      classes: filteredNewClasses,\r\n      childs: productChilds,\r\n      mode: \"classifychilds\",\r\n    };\r\n    const childclassifyResponse = await fetchData(\r\n       \"POST\",\r\n      classifyUrl,\r\n      classifybody,\r\n     \r\n    );\r\n    console.log(\r\n      \"child classifyResponse:\",\r\n      JSON.stringify(childclassifyResponse)\r\n    );\r\n  }\r\n \r\n  return {\r\n    success: true,\r\n    message: \"Data saved successfully\",\r\n    ErrorObject: ErrorObject,\r\n    Finalmessage: Finalmessage,\r\n  };\r\n};\r\n \r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n \r\n \r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      console.log(\"Processing prodChild:\", prodChild);\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        console.log(\"Released prodChild:\", prodChild);\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        console.log(\"Matching change for prodChild:\", change);\r\n        return !change;\r\n      }\r\n      console.log(\"prodChild state is not 'released':\", prodChild.state);\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n \r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n \r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n \r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n \r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n \r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n \r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n \r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n \r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n \r\n      const patchUrl = `https://saasimplementationserverdev.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(\"PATCH\",patchUrl, updateBody, );\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n \r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n         \"POST\",\r\n        classifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n \r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        \"POST\",\r\n        declassifyUrl,\r\n        classifybody,\r\n       \r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n \r\n    console.log(\"All classification API calls completed successfully.\");\r\n \r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};"],"names":["forwardRef","_ref","ref","data","columns","addedItem","CAName","state","showWarningToast","useToast","rowSelection","setRowSelection","useState","useEffect","addPlant","selectedItems","table","getSelectedRowModel","rows","map","item","original","length","MSG_EMPTYADD_ERROR","useImperativeHandle","enhancedColumns","useMemo","id","cell","_ref2","row","_jsx","type","className","checked","getIsSelected","onChange","getToggleSelectedHandler","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","_jsxs","_Fragment","children","onClick","getRowModel","forEach","toggleSelected","style","maxHeight","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","accessorKey","PlantRenderer","plants","itemId","isRemoveMode","handleRemovePlant","console","log","plant","marginRight","display","alignItems","color","fontWeight","PlantName","PlantERPStatus","AiOutlineClose","size","cursor","marginLeft","PlantID","getCardData","droppedObjectData","cardData","title","Title","Type","owner","Owner","Description","imageURL","EIN","getTableData","tableData","CAData","ItemName","ItemTitle","Plant","ItemPlants","ItemId","Change","Seq","Status","PlantStatus","MFGChange","MFGStatus","ChangeStatus","CAStatus","OracleTemplate","MBom","MBOM","getUniqueTableData","uniqueData","tableColumns","header","uniqueColumns","processErrorObj","errorObj","assignedPlant","updatedAssignedClasses","uniquePlant","filter","some","push","_objectSpread","formattedFinalMessage","finalMessage","messageList","split","msg","trim","userSelect","position","paddingRight","handleCopy","textToCopy","concat","join","navigator","clipboard","writeText","right","top","background","border","fontSize","FaRegCopy","index","extractIdsFromTitles","allPlants","newClasses","itemTitle","replace","matchedPlant","find","toLowerCase","handleRemoveData","async","removedTitles","productId","rowstoDelete","declassifyUrl","classifybody","classes","declassifyResponse","fetchData","JSON","stringify","handleAddData","objectId","proposedChanges","productChilds","hasMBOM","NotPropagableChilds","prodChild","change","identifier","action","ErrorObject","classId","missingIn","child","includes","name","ClassID","Childs","Finalmessage","_allPlants$find","classTitle","message","filteredNewClasses","classifyUrl","mode","classifyResponse","error","childs","childclassifyResponse","success","saveData","updatedItems","classesToBeClassified","initialAssignedClasses","headers","AllClasses","finalArray","ENOVIA_BASE_URL","process","WAFData","loadWAFData","fetchOOTBData","url","body","method","Promise","resolve","reject","authenticatedRequest","onComplete","response","onFailure","ErrorObj","classItem","MBOMValue","prodchilds","notPropagableChild","childId","childName","Array","isArray","every","childTitles","errorItem","updateBody","MBOMName","propagateClasses","Object","keys","_response$member$","nextApiUrl","cestamp","member","patchUrl"],"sourceRoot":""}