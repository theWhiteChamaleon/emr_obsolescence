{"version":3,"file":"static/js/20.7cd09c10.chunk.js","mappings":"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","sources":["components/Alert/ReusableAlert.jsx","components/Button/Button.jsx","components/Loader/Loader.js","components/Modal/customModal.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","hooks/useToast.js","components/FileUploader/FileUploader.jsx","pages/mass-upload/validateFile.js","components/Select/customSelect.jsx","components/Modals/ConfirmationModal.jsx","components/bootsrap-table/Table.jsx","hooks/Mass-Upload/useMassUpload.js","pages/mass-upload/mappedList.jsx","components/Modals/ColumnMappingModal.jsx","hooks/Mass-Upload/useMassUploadDocument.js","pages/mass-upload/massUpload.jsx","utils/downloadTemplate.js","massuUploadIndex.js","services/api/PlantAssignment/fetchCsrfService.js"],"sourcesContent":["import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    progress = undefined,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      progress,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\n// New function that wraps useToast and adds progress\r\nconst useToastWithProgress = () => {\r\n  const { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast } = useToast();\r\n\r\n  const showToastWithProgress = (message, options = {}) => {\r\n    showToast({ message, progress: 1, ...options }); // Add progress property\r\n  };\r\n\r\n  const showSuccessToastWithProgress = (message, options = {}) => {\r\n    showSuccessToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showErrorToastWithProgress = (message, options = {}) => {\r\n    showErrorToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showInfoToastWithProgress = (message, options = {}) => {\r\n    showInfoToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showWarningToastWithProgress = (message, options = {}) => {\r\n    showWarningToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  return {\r\n    showToastWithProgress,\r\n    showSuccessToastWithProgress,\r\n    showErrorToastWithProgress,\r\n    showInfoToastWithProgress,\r\n    showWarningToastWithProgress,\r\n  };\r\n};\r\n\r\n// export { useToast, useToastWithProgress };\r\nexport default useToast;\r\nexport { useToastWithProgress };","import React, { useState, forwardRef, useImperativeHandle } from \"react\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport \"./FileUploader.css\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst FileUpload = forwardRef(\r\n  (\r\n    {\r\n      fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"XLSX\", \"CSV\"],\r\n      multiple = true,\r\n      onUpload,\r\n      onReset,\r\n      disabled = false,\r\n      message = \"Drag & Drop your files here or Click to browse\",\r\n    },\r\n    ref\r\n  ) => {\r\n    const [files, setFiles] = useState([]);\r\n    const { showErrorToast } = useToast();\r\n\r\n    // Expose handleClearFiles to parent through ref\r\n    useImperativeHandle(ref, () => ({\r\n      handleClearFiles: (skipSuccessToast = false) => {\r\n        setFiles([]);\r\n        if (onUpload) {\r\n          onUpload([]);\r\n        }\r\n        if (onReset) {\r\n          onReset(skipSuccessToast); // Pass skipSuccessToast parameter\r\n        }\r\n      },\r\n    }));\r\n\r\n    const handleChange = (selectedFiles) => {\r\n      const fileArray = multiple ? [...selectedFiles] : [selectedFiles];\r\n      setFiles(fileArray);\r\n\r\n      // Callback function to send files to parent component\r\n      if (onUpload) {\r\n        onUpload(fileArray);\r\n      }\r\n    };\r\n\r\n    const handleClearFile = () => {\r\n      ref.current.handleClearFiles(false); // Pass false to show success toast\r\n    };\r\n    // const handleDragOver = (event) => {\r\n    //   if (disabled) {\r\n    //     event.preventDefault();\r\n    //     event.stopPropagation();\r\n    //     showErrorToast(\"Please choose an operation from the drop-down first\");\r\n    //   } else {\r\n    //     // Allow drag-over behavior for valid file uploads\r\n    //     event.preventDefault();\r\n    //     event.dataTransfer.dropEffect = \"copy\";\r\n    //   }\r\n    // };\r\n\r\n    return (\r\n      <div\r\n        className={`file-upload-container ${disabled ? \"disabled\" : \"\"}`}\r\n        // onDragOver={handleDragOver}\r\n      >\r\n        <h2>\r\n          {disabled ? \"Please select an operation first\" : \"Drag & Drop Files\"}\r\n        </h2>\r\n        <div className=\"upload-area\">\r\n          <FileUploader\r\n            multiple={multiple}\r\n            handleChange={handleChange}\r\n            name=\"file\"\r\n            types={fileTypes}\r\n            disabled={disabled}\r\n            hoverTitle={disabled ? \"\" : \"Drop here\"}\r\n          />\r\n          <div className=\"file-list\">\r\n            {files.length > 0 ? (\r\n              files.map((file, index) => (\r\n                <div\r\n                  className=\"mb-4\"\r\n                  key={index}\r\n                  style={{ display: \"flex\", alignItems: \"center\" }}\r\n                >\r\n                  <p className=\"me-2 mb-0\">📁 {file.name}</p>\r\n                  <button\r\n                    onClick={handleClearFile}\r\n                    style={{\r\n                      background: \"none\",\r\n                      border: \"none\",\r\n                      cursor: disabled ? \"not-allowed\" : \"pointer\",\r\n                      color: \"red\",\r\n                      opacity: disabled ? 0.5 : 1,\r\n                    }}\r\n                    disabled={disabled}\r\n                  >\r\n                    X\r\n                  </button>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>{message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default FileUpload;\r\n","import * as XLSX from \"xlsx\";\r\nimport config from \"./config.json\";\r\n\r\nconst processDataInChunks = (data, chunkSize = 1000) => {\r\n  const chunks = [];\r\n  for (let i = 0; i < data.length; i += chunkSize) {\r\n    chunks.push(data.slice(i, i + chunkSize));\r\n  }\r\n  return chunks;\r\n};\r\n\r\nconst validateFile = (file, collabSpaceTitles, selectedOperation) => {\r\n  return new Promise((resolve, reject) => {\r\n    console.log(\"🔍 Starting template validation...\");\r\n    console.log({\r\n      operation: selectedOperation,\r\n      fileName: file.name,\r\n    });\r\n\r\n    const operationNames = {\r\n      1: \"Physical Product\",\r\n      2: \"Physical Product Structure\",\r\n      3: \"Document\",\r\n      4: \"Physical Product-Document\",\r\n    };\r\n\r\n    const matchedOperation = operationNames[selectedOperation];\r\n    const expectedHeaders =\r\n      config.MassUpload[matchedOperation]?.fileHeaders || [];\r\n    const mandatoryAttributes =\r\n      config.MassUpload[matchedOperation]?.mandatoryAttributes || [];\r\n\r\n    if (!selectedOperation) {\r\n      reject({\r\n        errors: [\"Please select an operation first.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!Array.isArray(collabSpaceTitles)) {\r\n      console.error(\"❌ Invalid Collaborative Space list\");\r\n      reject({\r\n        errors: [\"Internal error: Invalid Collaborative Space list.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsBinaryString(file);\r\n\r\n    reader.onload = async (e) => {\r\n      const workbook = XLSX.read(e.target.result, {\r\n        type: \"binary\",\r\n        dense: true,\r\n        cellDates: true,\r\n        cellNF: false,\r\n        cellText: false,\r\n      });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[sheetName];\r\n      const uploadedHeaders =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      // Template header validation\r\n      const headerMismatch = !expectedHeaders.every((header) =>\r\n        uploadedHeaders.includes(header)\r\n      );\r\n\r\n      if (headerMismatch) {\r\n        console.error(\"❌ Template mismatch detected!\");\r\n        reject({\r\n          isTemplateMismatch: true,\r\n          errors: [\r\n            \"The template uploaded does not match the selected operation.\",\r\n          ],\r\n          headers: uploadedHeaders,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const headers =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      if (!headers || headers.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file has no content or is empty.\"],\r\n          headers: [],\r\n        });\r\n        return;\r\n      }\r\n\r\n      const allSheetData = XLSX.utils.sheet_to_json(worksheet, { defval: \"\" });\r\n\r\n      if (allSheetData.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file contains headers but no data rows.\"],\r\n          headers,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const chunks = processDataInChunks(allSheetData, 1000);\r\n      const validationErrors = [];\r\n      const invalidPrefixes = [\"MMI-\", \"RS-\", \"DAN-\", \"RSC-\", \"TF-\", \"ROXA-\"];\r\n\r\n      // Error counters\r\n      let errorStats = {\r\n        mandatory: 0,\r\n        collabSpace: 0,\r\n        einPrefix: 0,\r\n        docPrefix: 0,\r\n      };\r\n\r\n      // Convert collabSpaceTitles to lowercase for case-insensitive comparison\r\n      const lowerCaseCollabSpaceTitles = collabSpaceTitles.map(title => title.toLowerCase());\r\n\r\n      for (let chunkIndex = 0; chunkIndex < chunks.length; chunkIndex++) {\r\n        const chunk = chunks[chunkIndex];\r\n        const progress = Math.round(((chunkIndex + 1) / chunks.length) * 100);\r\n\r\n        chunk.forEach((row, indexInChunk) => {\r\n          const globalRowIndex = chunkIndex * 1000 + indexInChunk;\r\n\r\n          // Mandatory fields validation\r\n          mandatoryAttributes.forEach((field) => {\r\n            if (!row[field] || row[field].toString().trim() === \"\") {\r\n              errorStats.mandatory++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${field}\" is required but is empty`\r\n              );\r\n            }\r\n          });\r\n\r\n          // Collaborative Space validation\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            const userCollabSpace = row[\"Collaborative Space\"]?.trim().toLowerCase() || \"\";\r\n            if (!userCollabSpace || !lowerCaseCollabSpaceTitles.includes(userCollabSpace)) {\r\n              errorStats.collabSpace++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${\r\n                  userCollabSpace\r\n                    ? `You are not allowed to create in \"Collaborative Space -\" (${userCollabSpace})`\r\n                    : 'Collaborative Space\" is Missing or Empty'\r\n                }`\r\n              );\r\n            }\r\n          }\r\n          // NEW: Validate that the first data row for Physical Product Structure has Level = 0\r\n          if (\r\n            matchedOperation === \"Physical Product Structure\" &&\r\n            globalRowIndex === 0\r\n          ) {\r\n            const firstRow = allSheetData[0];\r\n            const levelValue = firstRow[\"Level\"];\r\n            const levelStr = String(levelValue).trim();\r\n            console.log(\r\n              \"Validating Level for Physical Product Structure, first row:\",\r\n              firstRow,\r\n              \"Parsed Level:\",\r\n              levelStr\r\n            );\r\n\r\n            if (\r\n              levelStr === \"\" ||\r\n              (levelStr !== \"0\" && Number(levelStr) !== 0)\r\n            ) {\r\n              // Add validation error for Level with row number and column name\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Level\" value \"${levelValue}\"  The first entry in the file should be a level 0 object.`\r\n              );\r\n              console.log(\r\n                \"Level validation failed - first row Level is not 0:\",\r\n                levelValue\r\n              );\r\n            }\r\n\r\n            \r\n          }\r\n\r\n          // EIN Number / Document Name validation\r\n          let valueToValidate = null;\r\n          let columnName = \"\";\r\n\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Physical Product Structure\"\r\n          ) {\r\n            columnName = \"EIN Number\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.einPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"EIN Number\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          } else if (\r\n            matchedOperation === \"Physical Product-Document\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            columnName = \"Document Name\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.docPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Document Name\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          }\r\n\r\n             // NEW: Validate that for Physical Product Structure, the \"Quantity\" value is positive (cannot be zero or negative)\r\n             if (matchedOperation === \"Physical Product Structure\") {\r\n              columnName = \"Quantity\";\r\n              const quantityValue = row[columnName]?.toString().trim();\r\n              if (quantityValue) {\r\n                const numQuantity = Number(quantityValue);\r\n                if (isNaN(numQuantity) || numQuantity <= 0) {\r\n                  validationErrors.push(\r\n                    `Row ${globalRowIndex + 2}: \"Quantity\" value \"${quantityValue}\" Quantity should not be 0 or -ve.`\r\n                  );\r\n                  console.log(\r\n                    \"Quantity validation failed - Quantity is 0 or -ve:\",\r\n                    quantityValue\r\n                  );\r\n                }\r\n              }\r\n            }\r\n        });\r\n\r\n        // Log only at 25% intervals\r\n        if (progress % 25 === 0) {\r\n          console.log(`Processing: ${progress}% complete`, {\r\n            processedRows: (chunkIndex + 1) * 1000,\r\n            totalRows: allSheetData.length,\r\n            currentErrors: {\r\n              mandatory: errorStats.mandatory,\r\n              collaborativeSpace: errorStats.collabSpace,\r\n              einPrefix: errorStats.einPrefix,\r\n              documentPrefix: errorStats.docPrefix,\r\n              total: validationErrors.length,\r\n            },\r\n          });\r\n        }\r\n      }\r\n\r\n      if (validationErrors.length > 0) {\r\n        console.log(\"❌ Validation completed with errors:\", {\r\n          total: validationErrors.length,\r\n          byType: errorStats,\r\n        });\r\n        reject({\r\n          errors: validationErrors,\r\n          headers,\r\n          mandatoryAttributes,\r\n        });\r\n        return;\r\n      }\r\n\r\n      console.log(\"✅ Validation completed successfully\");\r\n      resolve({\r\n        headers,\r\n        sheetData: allSheetData,\r\n        validationErrors: [],\r\n        mandatoryAttributes,\r\n      });\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.error(\" Error reading file\");\r\n      reject({\r\n        errors: [\"File reading failed.\"],\r\n        headers: [],\r\n        isTemplateMismatch: false,\r\n      });\r\n    };\r\n  });\r\n};\r\n\r\nexport default validateFile;\r\n","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"./customSelect.css\";\r\n\r\nconst CustomSelect = ({\r\n  index,\r\n  selectedValue,\r\n  options,\r\n  onChange,\r\n  size,\r\n  className,\r\n}) => {\r\n  const handleChange = (e) => {\r\n    // If index is provided use it, otherwise just pass the value\r\n    if (index !== undefined) {\r\n      onChange(index, e.target.value);\r\n    } else {\r\n      onChange(e.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form.Select\r\n      aria-label=\"Attribute selection\"\r\n      value={selectedValue || \"\"}\r\n      onChange={handleChange}\r\n      size={size}\r\n      className={className}\r\n    >\r\n      <option value=\"\">{options.defaultLabel}</option> {/* Default option */}\r\n      {options.list.map((option, attrIndex) => (\r\n        <option key={attrIndex} value={option.value}>\r\n          {option.label}\r\n        </option>\r\n      ))}\r\n    </Form.Select>\r\n  );\r\n};\r\n\r\nexport default CustomSelect;\r\n","// ConfirmationModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Confirmation\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Confirm\",\r\n          variant: \"success\",\r\n          onClick: onConfirm,\r\n        },\r\n      ]}\r\n    >\r\n      <p>Are you sure you want to submit?</p>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport CustomSelect from \"../Select/customSelect\";\r\n// import \"./staticTable.css\"; // Ensure updated styles are applied\r\n\r\nconst StaticTable = ({\r\n  columnHeaders,\r\n  handleSelectChange,\r\n  dropdownOptions = [],\r\n}) => {\r\n  return (\r\n    <Table bordered className=\"table-light\">\r\n      <thead>\r\n        <tr>\r\n          <th className=\"header-styling\">Column Name</th>\r\n          <th className=\"header-styling\">Attribute Name</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {columnHeaders.map((column, index) => {\r\n          const { header, currentMapping, defaultLabel, disabled } = column;\r\n          // Get filtered dropdown options for this specific column\r\n          const filteredOptions = dropdownOptions(header);\r\n\r\n          return (\r\n            <tr key={index} className={disabled ? \"disabled-row\" : \"\"}>\r\n              <td className={disabled ? \"disabled-cell\" : \"\"}>{header}</td>\r\n              <td\r\n                className={`dropdown-cell ${\r\n                  disabled ? \"disabled-dropdown\" : \"\"\r\n                }`}\r\n              >\r\n                <div className=\"dropdown-wrapper\">\r\n                  <CustomSelect\r\n                    index={index}\r\n                    selectedValue={currentMapping?.uiLabel || header}\r\n                    onChange={(index, value) =>\r\n                      handleSelectChange(header, value)\r\n                    }\r\n                    size=\"lg\"\r\n                    className={`w-100 ${\r\n                      disabled ? \"custom-select-disabled\" : \"\"\r\n                    }`}\r\n                    disabled={disabled} // Fully disables interaction\r\n                    options={{\r\n                      defaultLabel: defaultLabel,\r\n                      list: filteredOptions,\r\n                    }}\r\n                  />\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default StaticTable;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService, fetchData } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useMassUpload = () => {\r\n  const { showErrorToast } = useToast();\r\n  const [mappedAttributes, setMappedAttributes] = useState([]);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  // Function to Fetch Spreadsheet Column Mapping\r\n  const fetchColumnMapping = async () => {\r\n    try {\r\n      console.log(\"Fetching column mapping...\");\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      // 🔹 Step 1: Call API 1 (GET) to Fetch Metadata\r\n      const metadataResponse = await callEnoviaWebService(\r\n        \"GET\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?%24top=1`,\r\n        \"\",\r\n        headers\r\n      );\r\n\r\n      if (!metadataResponse || !metadataResponse.output) {\r\n        throw new Error(\"Failed to fetch metadata.\");\r\n      }\r\n      console.log(\"Metadata Member:\", metadataResponse.output.member);\r\n\r\n      const objectId = metadataResponse.output?.member?.[0]?.id;\r\n      if (!objectId) {\r\n        throw new Error(\"No object ID found in metadata.\");\r\n      }\r\n\r\n      console.log(\"Extracted Object ID:\", objectId);\r\n\r\n      // 🔹 Step 2: Call API 2 (POST) to Fetch Attributes\r\n      const attributeResponse = await callEnoviaWebService(\r\n        \"POST\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/collabServices/attributes/op/read?tenant=OI000186152&xrequestedwith=xmlhttprequest`,\r\n        {\r\n          busIDs: [objectId],\r\n        },\r\n        headers\r\n      );\r\n\r\n      if (!attributeResponse || !attributeResponse.output) {\r\n        throw new Error(\"Failed to fetch attribute data.\");\r\n      }\r\n      console.log(\"Attribute Response:\", attributeResponse.output);\r\n\r\n      // 🔹 Step 3: Extract & Map Relevant Attributes\r\n\r\n      const groupData = attributeResponse.output.results?.[0]?.groupData || [];\r\n\r\n      console.log(\r\n        \"Full Group Data (with all NLS values):\",\r\n        groupData.map((item) => item.nls)\r\n      );\r\n\r\n      /// Extract attribute groups\r\n      // const attributeGroups = [\r\n      //   ...new Set(groupData.map((item) => item.groupNLS)),\r\n      // ];\r\n      // console.log(\"Attribute Groups:\", attributeGroups);\r\n\r\n      const systemAttributes = [\r\n        {\r\n          name: \"description\", // Change from backendName to name\r\n          nls: \"Description\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"Part Number\", // Change from backendName to name\r\n          nls: \"EIN Number\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"type\", // Change from backendName to name\r\n          nls: \"Type\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"title\", // Change from backendName to name\r\n          nls: \"Title\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\", // Change from backendName to name\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n      ];\r\n\r\n      const attributeGroups = groupData.map((item) => item.groupNLS);\r\n      console.log(\"Attribute Groups:\", attributeGroups);\r\n\r\n      // Get NLS values from API response\r\n      const apiNlsValues = groupData.map((item) => item.nls);\r\n      console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n      // Get NLS values from hardcoded system attributes\r\n      const systemNlsValues = systemAttributes.map((item) => item.nls);\r\n      console.log(\"System NLS Values:\", systemNlsValues);\r\n\r\n      const allNLSValues = [...new Set([...apiNlsValues, ...systemNlsValues])];\r\n      console.log(\"all nls value with Hardcode :\", allNLSValues);\r\n\r\n      // First filter out System Attributes from API response\r\n      const filteredGroupData = groupData.filter(\r\n        (attr) => attr.groupNLS !== \"System Attributes\"\r\n      );\r\n\r\n      console.log(\r\n        \"Filtered out API system attributes:\",\r\n        groupData.length - filteredGroupData.length,\r\n        \"items removed\"\r\n      );\r\n\r\n      // Then merge only non-system API attributes with your hardcoded ones\r\n      const mergeAttributes = [...filteredGroupData, ...systemAttributes];\r\n\r\n      // Then continue with your other filtering if needed\r\n      const relevantAttributes =\r\n        mergeAttributes.filter(\r\n          (attr) =>\r\n            attr.deploymentExtension === true ||\r\n            (attr.groupNLS && attr.groupNLS.trim() !== \"\")\r\n        ) || [];\r\n\r\n      console.log(\"Non-system attributes from API:\", relevantAttributes.length);\r\n\r\n      const mappedData = relevantAttributes.map((attr) => ({\r\n        uiLabel: attr.nls, // UI Display Name\r\n        backendName: attr.name || attr.backendName, // Backend Name (or name)\r\n        group: attr.groupNLS || \"General\", // Default group if not specified\r\n      }));\r\n\r\n      // Create a filtered version for dropdown that excludes System Attributes\r\n      const dropdownOptions = mappedData.filter(\r\n        (attr) => attr.group !== \"System Attributes\"\r\n      );\r\n      console.log(\"Mapped Attributes (total):\", mappedData);\r\n      console.log(\r\n        \"Dropdown Options (excluding System Attributes):\",\r\n        dropdownOptions\r\n      );\r\n      // Organize attributes by their groups\r\n      const attributesByGroup = {};\r\n\r\n      attributeGroups.forEach((group) => {\r\n        attributesByGroup[group] = mappedData.filter(\r\n          (attr) => attr.group === group\r\n        );\r\n      });\r\n\r\n      console.log(\"Mapped Attributes:\", mappedData);\r\n      console.log(\"All available NLS values:\", allNLSValues);\r\n      console.log(\r\n        \"Mapped Attributes (for dropdown) excluding System Attributes:\",\r\n        dropdownOptions\r\n      );\r\n      console.log(\"Attributes By Group:\", attributesByGroup);\r\n      console.log(\r\n        \"System Attributes found:\",\r\n        relevantAttributes.filter(\r\n          (attr) => attr.groupNLS === \"System Attributes\"\r\n        ).length\r\n      );\r\n      console.log(\r\n        \"Sample System Attribute:\",\r\n        relevantAttributes.find((attr) => attr.groupNLS === \"System Attributes\")\r\n      );\r\n\r\n      setMappedAttributes({\r\n        allNLSValues: allNLSValues,\r\n        dropdownOptions: dropdownOptions, // Use filtered list without System Attributes\r\n        mappedData: mappedData, // Keep full list for other purposes\r\n        attributesByGroup: attributesByGroup,\r\n        groups: attributeGroups,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching column mapping:\", error);\r\n      showErrorToast(error.message || \"Error fetching column mapping.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchColumnMapping();\r\n  }, []);\r\n\r\n  return { mappedAttributes, refreshMapping: fetchColumnMapping };\r\n};\r\n\r\nexport default useMassUpload;\r\n","import React, { useEffect } from \"react\";\r\nimport StaticTable from \"../../components/bootsrap-table/Table\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\n\r\nconst MappedList = ({\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  selectedMappings,\r\n  setSelectedMappings,\r\n}) => {\r\n  console.log(\"MappedList - Received columnHeaders:\", columnHeaders);\r\n  console.log(\r\n    \"MappedList - Received mandatoryAttributes:\",\r\n    mandatoryAttributes\r\n  );\r\n\r\n  const { mappedAttributes } = useMassUpload(); // Gets UI/backend name mappings\r\n  const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n\r\n  useEffect(() => {\r\n    if (mappedAttributes && Object.keys(mappedAttributes).length > 0) {\r\n      console.log(\"Mapped Attributes updated:\", mappedAttributes);\r\n    }\r\n  }, [mappedAttributes]);\r\n\r\n  // Checks if column header matches any NLS value\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) {\r\n      console.warn(\"allNLSValues is not an array:\", allNLSValues);\r\n      return false;\r\n    }\r\n\r\n    // Simple case-insensitive exact matching\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    const hasMatch = allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    console.log(\r\n      `Checking if header '${header}' matches any NLS value:`,\r\n      hasMatch\r\n    );\r\n    return hasMatch;\r\n  };\r\n\r\n  // Gets backend name for selected UI label\r\n  const getBackendNameForUILabel = (uiLabel) => {\r\n    const option = dropdownOptions.find((opt) => opt.uiLabel === uiLabel);\r\n    return option ? option.backendName : uiLabel;\r\n  };\r\n\r\n  // Prepare dropdown options for the table\r\n  // ...existing code...\r\n\r\n  // Prepare dropdown options for the table - filter out already selected values\r\n  const prepareDropdownOptions = (currentColumnHeader) => {\r\n    // Get all currently selected values except for the current column\r\n    const selectedValues = Object.entries(selectedMappings)\r\n      .filter(([header]) => header !== currentColumnHeader) // Exclude current column\r\n      .map(([_, mapping]) => mapping.uiLabel || mapping.mappedAttribute);\r\n\r\n    // Filter out options that are already selected in other columns\r\n    return dropdownOptions\r\n      .filter((attr) => !selectedValues.includes(attr.uiLabel))\r\n      .map((attr) => ({\r\n        value: attr.uiLabel,\r\n        label: attr.uiLabel,\r\n      }));\r\n  };\r\n\r\n  // ...existing code...\r\n\r\n  // Handles selection changes from Table\r\n  const handleSelectChange = (columnHeader, value) => {\r\n    // Get backend name for the selected UI label\r\n    const backendName = getBackendNameForUILabel(value);\r\n\r\n    setSelectedMappings((prev) => ({\r\n      ...prev,\r\n      [columnHeader]: {\r\n        columnName: columnHeader,\r\n        uiLabel: value,\r\n        mappedAttribute: backendName,\r\n        isMandatory: mandatoryAttributes.includes(columnHeader),\r\n      },\r\n    }));\r\n  };\r\n\r\n  // Prepare column data with all needed information\r\n  // ...existing code...\r\n\r\n  // Prepare column data with all needed information\r\n  const prepareColumnsData = () => {\r\n    return columnHeaders.map((header) => {\r\n      const hasNLS = hasMatchingNLS(header);\r\n      const isMandatory = mandatoryAttributes.includes(header);\r\n\r\n      return {\r\n        header,\r\n        isMandatory,\r\n        hasNLS,\r\n        currentMapping: selectedMappings[header],\r\n        defaultLabel: hasNLS ? header : \"Please select from Drop Down\",\r\n        // Only disable if BOTH conditions are true: has NLS match AND is mandatory\r\n        disabled: hasNLS && isMandatory,\r\n      };\r\n    });\r\n  };\r\n\r\n  // ...existing code...\r\n  return (\r\n    <StaticTable\r\n      columnHeaders={prepareColumnsData()}\r\n      handleSelectChange={handleSelectChange}\r\n      selectedMappings={selectedMappings}\r\n      dropdownOptions={(header) => prepareDropdownOptions(header)} // Pass as a function\r\n    />\r\n  );\r\n};\r\n\r\nexport default MappedList;\r\n","// ColumnMappingModal.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableAlert from \"../../components/Alert/ReusableAlert\";\r\nimport MappedList from \"../../pages/mass-upload/mappedList\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\n//import useFetchDocumentData from \"../../hooks/Mass-Upload/useMassUploadDocument\";\r\n\r\nconst ColumnMappingModal = ({\r\n  show, //controls modal visibility//\r\n  onHide, //function to hide modal//\r\n  columnHeaders, //array of column names from Excel//\r\n  mandatoryAttributes, //required fields from excel//\r\n  onColumnsMapped, //callback to receive the final mapping\r\n  existingMappings = {}, // Add this prop for existing mappings\r\n}) => {\r\n  // Initialize with existing mappings if available\r\n  const [selectedMappings, setSelectedMappings] = useState(existingMappings);\r\n  const { mappedAttributes } = useMassUpload();\r\n\r\n  // Reset mappings when modal is opened with new existingMappings\r\n  useEffect(() => {\r\n    if (show && Object.keys(existingMappings).length > 0) {\r\n      setSelectedMappings(existingMappings);\r\n    }\r\n  }, [show, existingMappings]);\r\n\r\n  const handleOkClick = () => {\r\n    console.group(\"Column Mapping Results\");\r\n    console.log(\"Raw Mappings:\", selectedMappings);\r\n\r\n    // Create complete mappings including unmapped columns\r\n    const completeMappings = {};\r\n\r\n    // Start with existing mappings to ensure we don't lose any\r\n    const simplifiedMappings = { ...existingMappings };\r\n\r\n    const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n\r\n    // Helper function to check if column has matching NLS\r\n    const hasMatchingNLS = (header) => {\r\n      if (!Array.isArray(allNLSValues)) return false;\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      return allNLSValues.some(\r\n        (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n      );\r\n    };\r\n\r\n    // Helper function to get backend name for a column with NLS match\r\n    const getBackendNameForHeader = (header) => {\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      const matchingOption = dropdownOptions.find(\r\n        (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n      );\r\n      return matchingOption ? matchingOption.backendName : header;\r\n    };\r\n\r\n    // Special mapping for known attributes that might not have NLS matches\r\n    const specialMappings = {\r\n      \"EIN Number\": \"PartNumber\",\r\n    };\r\n\r\n    // Process all column headers\r\n    columnHeaders.forEach((columnName) => {\r\n      if (selectedMappings[columnName]) {\r\n        // Column was mapped by user - extract the proper backend name\r\n        const userMapping = selectedMappings[columnName];\r\n\r\n        // Handle both object and string mappings\r\n        if (typeof userMapping === \"object\" && userMapping !== null) {\r\n          // It's an object with mappedAttribute property\r\n          completeMappings[columnName] = userMapping;\r\n          simplifiedMappings[columnName] = userMapping.mappedAttribute;\r\n        } else {\r\n          // It's already a string\r\n          completeMappings[columnName] = {\r\n            columnName: columnName,\r\n            uiLabel: columnName,\r\n            mappedAttribute: userMapping,\r\n            isMandatory: mandatoryAttributes.includes(columnName),\r\n            autoMapped: false,\r\n          };\r\n          simplifiedMappings[columnName] = userMapping;\r\n        }\r\n      } else {\r\n        // Column was not manually mapped - check if it already has a mapping\r\n        if (existingMappings[columnName]) {\r\n          // Use existing mapping\r\n          const existingMapping = existingMappings[columnName];\r\n\r\n          if (typeof existingMapping === \"object\" && existingMapping !== null) {\r\n            // It's an object with mappedAttribute\r\n            completeMappings[columnName] = existingMapping;\r\n            simplifiedMappings[columnName] = existingMapping.mappedAttribute;\r\n          } else {\r\n            // It's a string backend name\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: existingMapping,\r\n              isMandatory: mandatoryAttributes.includes(columnName),\r\n              autoMapped: true,\r\n            };\r\n            // simplifiedMappings already has this from the spread above\r\n          }\r\n        } else {\r\n          // No existing mapping - try to create one\r\n          const hasNLS = hasMatchingNLS(columnName);\r\n          const isSpecialColumn = specialMappings[columnName];\r\n          const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n          if (hasNLS || isSpecialColumn || isMandatory) {\r\n            const mappedAttribute = isSpecialColumn\r\n              ? specialMappings[columnName]\r\n              : getBackendNameForHeader(columnName);\r\n\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: mappedAttribute,\r\n              isMandatory: isMandatory,\r\n              autoMapped: true,\r\n            };\r\n\r\n            simplifiedMappings[columnName] = mappedAttribute;\r\n          } else {\r\n            // For unmapped columns without NLS match, use column name as attribute\r\n            simplifiedMappings[columnName] = columnName;\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: columnName,\r\n              isMandatory: false,\r\n              autoMapped: false,\r\n            };\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Create final mapping object with complete mappings\r\n    const finalMapping = {\r\n      columnMappings: completeMappings,\r\n      totalColumns: Object.keys(completeMappings).length,\r\n    };\r\n\r\n    console.log(\"Final Mapping Object:\", finalMapping);\r\n    console.log(\"Simplified Mappings for Backend:\", simplifiedMappings);\r\n    console.groupEnd();\r\n\r\n    // Call the callback with the mappings if provided\r\n    if (onColumnsMapped) {\r\n      onColumnsMapped(simplifiedMappings, finalMapping);\r\n    }\r\n\r\n    onHide();\r\n  };\r\n\r\n  const errorMessage = (\r\n    <>\r\n      <strong>⚠️Note:</strong> All column(s) of uploaded Spreadsheet are mapped\r\n      to valid Attribute Name. All mandatory Attribute Name is mapped to\r\n      uploaded Spreadsheet Column Name.\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Manage Spreadsheet Columns\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Ok\",\r\n          variant: \"primary\",\r\n          onClick: handleOkClick,\r\n        },\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Reset\",\r\n          variant: \"secondary\",\r\n          onClick: () => setSelectedMappings({}),\r\n        },\r\n      ]}\r\n    >\r\n      <ReusableAlert\r\n        variant=\"info\"\r\n        message={errorMessage}\r\n        className=\"mapped-popup-alert\"\r\n      />\r\n      <MappedList\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        selectedMappings={selectedMappings}\r\n        setSelectedMappings={setSelectedMappings}\r\n      />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ColumnMappingModal;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useFetchDocumentData = () => {\r\n  const { showErrorToast } = useToast();\r\n  const [documentData, setDocumentData] = useState(null);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  const API_URL = `${ENOVIA_BASE_URL}/resources/v1/collabServices/authoring/createContent/typeInfo?tenant=OI000186152&xrequestedwith=xmlhttprequest`;\r\n\r\n  const fetchDocumentData = async () => {\r\n    try {\r\n      console.log(\"Fetching document data from API...\");\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        console.error(\"Failed to fetch CSRF headers.\");\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"CSRF Headers:\", headers);\r\n      const body = {\"type\":\"Document\",\"preferedType\":\"Document\",\"typeName\":\"Document\",\"subTypes\":true,\"runUXBL\":true,\"metrics\":{\"UXName\":\"New\",\"client_app_domain\":\"3DEXPERIENCE 3DDashboard\",\"client_app_name\":\"ENXWDOC_AP\"}};\r\n      // Fetch data from API\r\n      const response = await callEnoviaWebService(\"POST\", API_URL, body, headers);\r\n      console.log(\"API Response for Document template:\", response);\r\n\r\n      // Validate response structure\r\n      if (response.status !== true) {\r\n        console.error(\"Invalid API response structure:\", response);\r\n        showErrorToast(\"Failed to fetch document data. Invalid response structure.\");\r\n        return;\r\n      }\r\n\r\n      // Extract relevant data\r\n      const documentInfo = response.output.result[0];\r\n      console.log(\"Extracted Document Info:\", documentInfo);\r\n\r\n      // Set the document data in state\r\n      setDocumentData(documentInfo);\r\n    } catch (error) {\r\n      console.error(\"Error fetching document data:\", error);\r\n      showErrorToast(error.message || \"Error fetching document data.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDocumentData();\r\n  }, []);\r\n\r\n  return { documentData, refreshData: fetchDocumentData };\r\n};\r\n\r\nexport default useFetchDocumentData;","import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./Mockup.css\";\r\nimport { Form, Stack } from \"react-bootstrap\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\nimport FileUpload from \"../../components/FileUploader/FileUploader\";\r\nimport { downloadTemplate } from \"../../utils/downloadTemplate\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport validateFile from \"./validateFile\";\r\nimport CustomSelect from \"../../components/Select/customSelect\";\r\nimport { globalCollabSpaceTitles } from \"../../services/api/droppableService\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\nimport ColumnMappingModal from \"../../components/Modals/ColumnMappingModal\";\r\nimport api from \"../../utils/api\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\nimport useFetchDocumentData from \"../../hooks/Mass-Upload/useMassUploadDocument\";\r\n\r\nconst API_ENDPOINTS = {\r\n  1: \"/massUpload/uploadPhysicalProduct\",\r\n  2: \"/massUpload/uploadProductStructure\",\r\n  3: \"/massUpload/uploadDocument\",\r\n  4: \"/massUpload/uploadProductDocument\",\r\n};\r\n\r\n// Replace the transformSheetDataWithMappings function with this implementation\r\n\r\nconst transformSheetDataWithMappings = (\r\n  sheetData,\r\n  columnMappings,\r\n  operationType,\r\n  mappedAttributesData // Add this parameter\r\n) => {\r\n  // Debug log column names and some sample values\r\n  if (sheetData.length > 0) {\r\n    console.log(\r\n      \"Actual column names in sheet data:\",\r\n      Object.keys(sheetData[0])\r\n    );\r\n    console.log(\"Sample row values:\", sheetData[0]);\r\n    console.log(\"Column mappings applied:\", columnMappings);\r\n  }\r\n  if (!sheetData || !columnMappings) {\r\n    console.error(\"Missing data or mappings for transformation\");\r\n    return null;\r\n  }\r\n\r\n  console.log(\"Transforming sheet data with mappings:\", columnMappings);\r\n\r\n  // Extract group information from mappedAttributes\r\n  // const { mappedData = [], attributesByGroup = {} } =\r\n  //   mappedAttributesData || {};\r\n  const mappedData = mappedAttributesData?.mappedData || [];\r\n\r\n  console.log(\"Mapped attributes data in mass upload:\", mappedAttributesData);\r\n  // console.log(\"Attributes by group in mass upload:\", attributesByGroup);\r\n  console.log(\"Mapped data in massupload:\", mappedAttributesData.mappedData);\r\n\r\n  // Debug full structure\r\n  console.log(\"Full mapped attributes structure:\", mappedAttributesData);\r\n\r\n  // Create a map of backend attribute names to their groups\r\n  // The correct data is in mappedData array, not mappedAttributesData.mappedData\r\n\r\n  // Create a map of backend attribute names to their groups\r\n  const attributeGroupMap = {};\r\n  if (Array.isArray(mappedData)) {\r\n    mappedData.forEach((option) => {\r\n      attributeGroupMap[option.backendName] = option.group || \"System\";\r\n      console.log(\r\n        `Mapping ${option.backendName} to group ${option.group || \"System\"}`\r\n      );\r\n    });\r\n  }\r\n\r\n  console.log(\r\n    \"Backend name mapping for title:\",\r\n    mappedData.find((attr) => attr.backendName === \"title\")\r\n  );\r\n  console.log(\r\n    \"Backend name mapping for description:\",\r\n    mappedData.find((attr) => attr.backendName === \"description\")\r\n  );\r\n  console.log(\r\n    \"Backend name mapping for collabspaceTitle:\",\r\n    mappedData.find((attr) => attr.backendName === \"collabspaceTitle\")\r\n  );\r\n\r\n  // Update the getPathForAttribute function in transformSheetDataWithMappings\r\n\r\n  const getPathForAttribute = (backendName, columnName) => {\r\n    // ROOT LEVEL ATTRIBUTES - These always go at the root\r\n    if (\r\n      backendName === \"title\" ||\r\n      backendName === \"type\" ||\r\n      backendName === \"classificationType\" ||\r\n      backendName === \"collabspaceTitle\" // This needs special handling\r\n    ) {\r\n      // Special case for collabspaceTitle - map to collabspace at root level\r\n      if (backendName === \"collabspaceTitle\") {\r\n        console.log(\"collabspaceTitle mapped to root collabspace\");\r\n        return \"collabspaceTitle\";\r\n      }\r\n\r\n      console.log(`${backendName} placed at root level`);\r\n      return backendName;\r\n    }\r\n\r\n    // EIN NUMBER - Always goes to dseng:EnterpriseReference.partNumber\r\n    if (\r\n      columnName === \"EIN Number\" ||\r\n      backendName === \"PartNumber\" ||\r\n      backendName === \"Part Number\"\r\n    ) {\r\n      console.log(\r\n        \"EIN Number mapped to attributes.dseng:EnterpriseReference.partNumber\"\r\n      );\r\n      return \"attributes.dseng:EnterpriseReference.partNumber\";\r\n    }\r\n\r\n    // DESCRIPTION - Always goes in attributes\r\n    if (backendName === \"description\") {\r\n      console.log(\"Description mapped to attributes.description\");\r\n      return \"attributes.description\";\r\n    }\r\n\r\n    // All other attributes based on their group\r\n    const group = attributeGroupMap[backendName];\r\n    console.log(`Attribute: ${backendName}, Group: ${group || \"unknown\"}`);\r\n\r\n    // Skip attributes with unknown groups\r\n    if (!group) {\r\n      console.log(`Skipping attribute with unknown group: ${backendName}`);\r\n      return null; // Return null instead of a path\r\n    }\r\n\r\n    if (group === \"System Attributes\") {\r\n      // System attributes go directly under attributes\r\n      return `attributes.${backendName}`;\r\n    } else {\r\n      // All other attributes go to dseno:EnterpriseAttributes\r\n      return `attributes.dseno:EnterpriseAttributes.${backendName}`;\r\n    }\r\n  };\r\n\r\n  // Transform each row in the sheet data\r\n  const transformedItems = sheetData.map((row) => {\r\n    // Initialize the structure with empty nested objects\r\n    const transformedRow = {};\r\n\r\n    // Process each cell in the row\r\n    Object.entries(row).forEach(([columnName, value]) => {\r\n      // Skip unmapped columns\r\n      if (!columnMappings[columnName]) return;\r\n\r\n      const uiLabelBackendName = columnMappings[columnName];\r\n\r\n      // Special case lookup for system attributes\r\n      const systemAttributeMappings = {\r\n        Title: \"title\",\r\n        Description: \"description\",\r\n        \"Collaborative Space\": \"collabspaceTitle\",\r\n        \"Collab Space\": \"collabspaceTitle\",\r\n        Type: \"type\",\r\n      };\r\n\r\n      // If the mapping contains a UI label instead of backend name, convert it\r\n      const backendName =\r\n        systemAttributeMappings[uiLabelBackendName] ||\r\n        mappedData.find((attr) => attr.uiLabel === uiLabelBackendName)\r\n          ?.backendName ||\r\n        uiLabelBackendName;\r\n\r\n      const path = getPathForAttribute(backendName, columnName);\r\n\r\n      // Add this debug log\r\n      if (\r\n        backendName === \"title\" ||\r\n        backendName === \"description\" ||\r\n        backendName.toLowerCase() === \"collabspace\"\r\n      ) {\r\n        console.log(`Placing ${backendName} at path: ${path}`);\r\n      }\r\n\r\n      // Skip if no path determined\r\n      if (!path) return;\r\n\r\n      // Build the nested structure\r\n      const pathParts = path.split(\".\");\r\n      let current = transformedRow;\r\n\r\n      // Create nested objects\r\n      for (let i = 0; i < pathParts.length - 1; i++) {\r\n        const part = pathParts[i];\r\n        if (!current[part]) {\r\n          current[part] = {};\r\n        }\r\n        current = current[part];\r\n      }\r\n\r\n      // Set the value at the final path location\r\n      current[pathParts[pathParts.length - 1]] = value;\r\n    });\r\n\r\n    // Handle physical product type determination\r\n    if (operationType === \"1\") {\r\n      // Find the column header regardless of case\r\n      const productTypeColumn = Object.keys(row).find(\r\n        (key) =>\r\n          key.toLowerCase().includes(\"physical product\") ||\r\n          key.toLowerCase().includes(\"raw material\")\r\n      );\r\n\r\n      if (productTypeColumn && row[productTypeColumn]) {\r\n        const productType = row[productTypeColumn].toLowerCase().trim();\r\n        transformedRow.type = productType.includes(\"physical product\")\r\n          ? \"VPMReference\"\r\n          : productType.includes(\"raw material\")\r\n          ? \"Raw_Material\"\r\n          : \"\";\r\n\r\n        console.log(\r\n          `Product type determined: ${transformedRow.type} from value: ${row[productTypeColumn]}`\r\n        );\r\n      }\r\n    }\r\n\r\n    // For document, default type to \"Document\"\r\n    if (operationType === \"3\" && !transformedRow.type) {\r\n      transformedRow.type = \"Document\";\r\n    }\r\n\r\n    return transformedRow;\r\n  });\r\n\r\n  // Add this before returning the final result\r\n  if (transformedItems.length > 0) {\r\n    console.log(\r\n      \"Sample transformed item structure:\",\r\n      JSON.stringify(transformedItems[0], null, 2)\r\n    );\r\n  }\r\n\r\n  // Prepare data in chunks for API submission\r\n  const CHUNK_SIZE = 1000;\r\n  const chunks = [];\r\n\r\n  for (let i = 0; i < transformedItems.length; i += CHUNK_SIZE) {\r\n    chunks.push(transformedItems.slice(i, i + CHUNK_SIZE));\r\n  }\r\n\r\n  return {\r\n    chunks,\r\n    totalChunks: chunks.length,\r\n    totalItems: transformedItems.length,\r\n    originalData: sheetData,\r\n    mappings: columnMappings,\r\n  };\r\n};\r\n// Generate automatic column mappings\r\nconst generateColumnMappings = (\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  mappedAttributes\r\n) => {\r\n  const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n  const completeMappings = {};\r\n  const simplifiedMappings = {};\r\n\r\n  // Helper function to check if column has matching NLS\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) return false;\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    return allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n  };\r\n\r\n  // Special mappings for system attributes to ensure they use correct backend names\r\n  const systemAttributeMappings = {\r\n    Title: \"title\",\r\n    Description: \"description\",\r\n    \"Collaborative Space\": \"collabspaceTitle\",\r\n    \"Collab Space\": \"collabspaceTitle\",\r\n    Type: \"type\",\r\n    \"EIN Number\": \"Part Number\",\r\n  };\r\n\r\n  // Then modify the getBackendNameForHeader function\r\n  const getBackendNameForHeader = (header) => {\r\n    // First check if it's a system attribute we want to hardcode\r\n    if (systemAttributeMappings[header]) {\r\n      return systemAttributeMappings[header];\r\n    }\r\n\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n\r\n    // Also check case-insensitive for system attributes\r\n    const systemAttrKey = Object.keys(systemAttributeMappings).find(\r\n      (key) => key.toLowerCase() === normalizedHeader\r\n    );\r\n\r\n    if (systemAttrKey) {\r\n      return systemAttributeMappings[systemAttrKey];\r\n    }\r\n\r\n    // Otherwise use dropdown options\r\n    const matchingOption = dropdownOptions.find(\r\n      (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    return matchingOption ? matchingOption.backendName : header;\r\n  };\r\n\r\n  // Special mapping for known attributes that might not have NLS matches\r\n  const specialMappings = {\r\n    \"EIN Number\": \"PartNumber\",\r\n  };\r\n\r\n  // Process all column headers\r\n  columnHeaders.forEach((columnName) => {\r\n    // Column was not manually mapped\r\n    const hasNLS = hasMatchingNLS(columnName);\r\n    const isSpecialColumn = specialMappings[columnName];\r\n    const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n    if (isSpecialColumn) {\r\n      const mappedAttribute = specialMappings[columnName];\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory || false,\r\n        autoMapped: true,\r\n        isSpecial: true,\r\n      };\r\n\r\n      // Also add to simplified mappings\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    }\r\n    // Then handle columns with NLS matches OR mandatory columns\r\n    else if (hasNLS || isMandatory) {\r\n      const mappedAttribute = getBackendNameForHeader(columnName);\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory,\r\n        autoMapped: true,\r\n      };\r\n\r\n      // Also add to simplified mappings\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    }\r\n  });\r\n\r\n  return {\r\n    completeMappings,\r\n    simplifiedMappings,\r\n    totalColumns: Object.keys(completeMappings).length,\r\n  };\r\n};\r\n\r\nconst MassUpload = () => {\r\n  const [collabTitles, setCollabTitles] = useState([]);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [errorModalShow, setErrorModalShow] = useState(false);\r\n  const [showContentErrors, setShowContentErrors] = useState(false);\r\n  const [showSpreadsheetModal, setShowSpreadsheetModal] = useState(false); // New state for spreadsheet modal\r\n  const { showErrorToast, showSuccessToast } = useToast();\r\n  const [isValidating, setIsValidating] = useState(false);\r\n  const [operationChoice, setOperationChoice] = useState(\"\");\r\n  const [errors, setErrors] = useState([]);\r\n  const [columnHeaders, setColumnHeaders] = useState([]);\r\n  const [mandatoryAttributes, setMandatoryAttributes] = useState([]);\r\n  const fileUploaderRef = useRef(); // Add this ref\r\n  const [formattedData, setFormattedData] = useState(null);\r\n  const { mappedAttributes, refreshMapping } = useMassUpload();\r\n  const { documentData, refreshData } = useFetchDocumentData();\r\n\r\n  useEffect(() => {\r\n    // Log the global variable directly to verify its contents\r\n    console.log(\r\n      \"[MassUpload.jsx] Global collabSpaceTitles:\",\r\n      globalCollabSpaceTitles\r\n    );\r\n    if (Array.isArray(globalCollabSpaceTitles)) {\r\n      setCollabTitles([...globalCollabSpaceTitles]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx] ❌ globalCollabSpaceTitles is not an array!\",\r\n        globalCollabSpaceTitles\r\n      );\r\n    }\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceTitles:\", collabTitles);\r\n  }, []);\r\n\r\n  const handleFileUpload = async (files) => {\r\n    if (files.length === 0) return;\r\n\r\n    try {\r\n      setIsValidating(true);\r\n      console.log(\"Starting file validation...\");\r\n      console.log(\"Selected Operation:\", operationChoice);\r\n      console.log(\"File:\", files[0].name);\r\n\r\n      const validationResult = await validateFile(\r\n        files[0],\r\n        collabTitles,\r\n        operationChoice\r\n      );\r\n\r\n      const {\r\n        headers = [],\r\n        validationErrors = [],\r\n        mandatoryAttributes = [],\r\n        sheetData = [],\r\n      } = validationResult;\r\n\r\n      setColumnHeaders(headers);\r\n      setMandatoryAttributes(mandatoryAttributes);\r\n\r\n      // Map sheet data to JSON format with operation type\r\n      if (sheetData.length > 0) {\r\n        console.log(\"Sheet Data \", sheetData);\r\n        // // Generate initial mapping with default column names\r\n        // const mappedData = mapsheetData(sheetData, operationChoice);\r\n        // console.log(\"Mapped JSON data:\", mappedData);\r\n\r\n        // // Store original data for potential future manual mapping\r\n        // mappedData.originalData = sheetData;\r\n        setFormattedData({ originalData: sheetData });\r\n\r\n        // Once mappedAttributes is refreshed, apply automatic mapping\r\n        await refreshMapping(operationChoice);\r\n        await refreshData(operationChoice);\r\n\r\n        // Apply automatic column mapping (wait for mappedAttributes to be updated)\r\n        setTimeout(() => {\r\n          console.log(\r\n            \"Applying automatic column mapping with:\",\r\n            mappedAttributes\r\n          );\r\n          if (mappedAttributes && Object.keys(mappedAttributes).length > 0) {\r\n            // Generate mappings automatically\r\n            const { simplifiedMappings } = generateColumnMappings(\r\n              headers,\r\n              mandatoryAttributes,\r\n              mappedAttributes\r\n            );\r\n\r\n            console.log(\"Auto-generated mappings:\", simplifiedMappings);\r\n\r\n            // Apply mappings to transform the data\r\n            if (Object.keys(simplifiedMappings).length > 0) {\r\n              const transformedData = transformSheetDataWithMappings(\r\n                sheetData,\r\n                simplifiedMappings,\r\n                operationChoice,\r\n                mappedAttributes // Pass mappedAttributes here\r\n              );\r\n\r\n              setFormattedData(transformedData);\r\n              showSuccessToast(\r\n                `Data automatically mapped with ${\r\n                  Object.keys(simplifiedMappings).length\r\n                } columns`\r\n              );\r\n            }\r\n          }\r\n        }, 500); // Small delay to ensure mappedAttributes is ready\r\n      }\r\n\r\n      if (validationErrors.length === 0) {\r\n        setErrors([]);\r\n        showSuccessToast(\"File validated successfully!\");\r\n      } else {\r\n        setErrors(validationErrors);\r\n        setErrorModalShow(true);\r\n      }\r\n    } catch (errorResponse) {\r\n      console.error(\"Validation failed:\", errorResponse);\r\n\r\n      const {\r\n        errors: responseErrors = [\"Unknown validation error.\"],\r\n        headers: responseHeaders = [],\r\n        mandatoryAttributes: responseMandatoryAttributes = [],\r\n        isTemplateMismatch = false,\r\n      } = errorResponse;\r\n\r\n      // If there's a template mismatch, show error and reset widget\r\n      if (isTemplateMismatch) {\r\n        showErrorToast(\r\n          \"The template uploaded and the selected operation do not match\"\r\n        );\r\n        handleReset(true); // Pass true to skip success toast\r\n        // Clear the file uploader\r\n        if (fileUploaderRef.current) {\r\n          fileUploaderRef.current.handleClearFiles();\r\n        }\r\n        return;\r\n      }\r\n\r\n      // Only set these states if it's not a template mismatch\r\n      setErrors(responseErrors);\r\n      setColumnHeaders(responseHeaders);\r\n      setMandatoryAttributes(responseMandatoryAttributes);\r\n      setErrorModalShow(true);\r\n    } finally {\r\n      setIsValidating(false);\r\n    }\r\n  };\r\n\r\n  const handleDownloadTemplate = () => {\r\n    downloadTemplate(showErrorToast)(operationChoice);\r\n  };\r\n\r\n  const handleReset = (skipSuccessToast = false) => {\r\n    // Reset all states to their initial values\r\n    setModalShow(false);\r\n    setErrorModalShow(false);\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(false);\r\n    setIsValidating(false);\r\n    setOperationChoice(\"\");\r\n    setErrors([]);\r\n    setColumnHeaders([]);\r\n    setMandatoryAttributes([]);\r\n    setFormattedData(null); // Add this line\r\n\r\n    // Reset the dropdown\r\n    const selectElement = document.querySelector(\r\n      'select[aria-label=\"Choose Operations\"]'\r\n    );\r\n    if (selectElement) {\r\n      selectElement.value = \"\";\r\n    }\r\n\r\n    // Only show success toast if not skipped\r\n    if (!skipSuccessToast) {\r\n      showSuccessToast(\"Widget reset successfully!\");\r\n    }\r\n  };\r\n\r\n  const handleOpenSpreadsheetModal = () => {\r\n    setShowContentErrors(false); // Close content errors modal\r\n    setShowSpreadsheetModal(true); // Open spreadsheet modal\r\n  };\r\n\r\n  const handleOperationChange = (value) => {\r\n    console.log(\"Operation selected:\", value); // Debug log\r\n    setOperationChoice(value);\r\n    // Add this line to fetch mapping data when operation changes\r\n    refreshMapping(value);\r\n  };\r\n\r\n  // Add this useEffect to monitor state changes\r\n  useEffect(() => {\r\n    console.log(\"Operation Choice updated:\", operationChoice);\r\n  }, [operationChoice]);\r\n\r\n  // It will be disabled if no file is uploaded (no headers) or if there are validation errors.\r\n  const submitDisabled = columnHeaders.length === 0 || errors.length > 0;\r\n  const manageSpreadsheetDisabled = columnHeaders.length === 0; // Disable if no file uploaded\r\n\r\n  const handleConfirmSubmit = async () => {\r\n    try {\r\n      if (!formattedData) {\r\n        showErrorToast(\"No data to submit\");\r\n        return;\r\n      }\r\n\r\n      const endpoint = API_ENDPOINTS[operationChoice];\r\n      if (!endpoint) {\r\n        showErrorToast(\"Invalid operation type\");\r\n        return;\r\n      }\r\n\r\n      const { chunks, totalChunks } = formattedData;\r\n      let successCount = 0;\r\n      let failureCount = 0;\r\n\r\n      showSuccessToast(`Starting upload of ${totalChunks} chunks...`);\r\n\r\n      for (let i = 0; i < chunks.length; i++) {\r\n        try {\r\n          const chunk = chunks[i];\r\n          const response = await api.post(endpoint, {\r\n            items: chunk,\r\n          });\r\n\r\n          if (response.status === 200) {\r\n            successCount++;\r\n            if (i % 5 === 0) {\r\n              // Show progress every 5 chunks\r\n              showSuccessToast(\r\n                `Processed ${i + 1} of ${totalChunks} chunks...`\r\n              );\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(`Chunk ${i + 1} failed:`, error);\r\n          failureCount++;\r\n        }\r\n      }\r\n\r\n      const finalMessage = `Upload complete: ${successCount} chunks successful, ${failureCount} failed`;\r\n      if (failureCount > 0) {\r\n        showErrorToast(finalMessage);\r\n      } else {\r\n        showSuccessToast(\"Upload successful!\");\r\n        setModalShow(false);\r\n        handleReset();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Upload error:\", error);\r\n      showErrorToast(`Upload failed: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  console.log(\"Errors in Massupload.jsx:\", errors);\r\n\r\n  // Add this computed value for FileUpload component\r\n  const isFileUploadDisabled = !operationChoice;\r\n\r\n  return (\r\n    <>\r\n      <Stack className=\"mt-3\" gap={4}>\r\n        {/* Choose operation and download template */}\r\n        <Stack direction=\"horizontal\">\r\n          <CustomSelect\r\n            selectedValue={operationChoice}\r\n            onChange={handleOperationChange}\r\n            size=\"lg\"\r\n            className=\"w-50\"\r\n            options={{\r\n              defaultLabel: \"Choose Operations\",\r\n              list: [\r\n                { value: \"1\", label: \"Physical Product/Raw Material\" },\r\n                { value: \"2\", label: \"Physical Product Structure\" },\r\n                { value: \"3\", label: \"Document\" },\r\n                { value: \"4\", label: \"Physical Product-Document\" },\r\n              ],\r\n            }}\r\n          />\r\n          {/* Conditionally render multiple file input for Document type */}\r\n          <div className=\"p-2 ms-auto\">\r\n            {operationChoice === \"3\" && (\r\n              <Form.Group controlId=\"formFileMultiple\">\r\n                <Form.Control type=\"file\" multiple />\r\n              </Form.Group>\r\n            )}\r\n          </div>\r\n          <div className=\"p-2\">\r\n            <CustomButton\r\n              variant=\"link ms-auto\"\r\n              size=\"lg\"\r\n              onClick={handleDownloadTemplate}\r\n              text=\"Download Template\"\r\n            />\r\n          </div>\r\n        </Stack>\r\n\r\n        {/* Drag and Drop File Upload */}\r\n        {/* Modified FileUpload with disabled state */}\r\n        <div className={isFileUploadDisabled ? \"opacity-50\" : \"\"}>\r\n          <FileUpload\r\n            ref={fileUploaderRef}\r\n            fileTypes={[\"XLSX\"]}\r\n            multiple={false}\r\n            onUpload={handleFileUpload}\r\n            onReset={handleReset}\r\n            disabled={isFileUploadDisabled}\r\n            message={\r\n              isFileUploadDisabled\r\n                ? \"Please select an operation first\"\r\n                : \"Drag & Drop your files here or Click to browse\"\r\n            }\r\n          />\r\n        </div>\r\n\r\n        {/* Show loader while validating */}\r\n        {isValidating && <Loader />}\r\n\r\n        {/* Submit Button and Content Error Button */}\r\n        <Stack direction=\"horizontal\" gap={2}>\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Background\"\r\n            className=\"size-increase\"\r\n          />\r\n          <div className=\"ms-auto d-flex gap-5\">\r\n            {errors.length > 0 && (\r\n              <CustomButton\r\n                variant=\"danger\"\r\n                onClick={() => setShowContentErrors(true)}\r\n                text={`Content Errors (${errors.length})`}\r\n              />\r\n            )}\r\n\r\n            <CustomButton\r\n              variant={manageSpreadsheetDisabled ? \"secondary\" : \"info\"}\r\n              onClick={handleOpenSpreadsheetModal}\r\n              text=\"Manage Spreadsheet Columns\"\r\n              disabled={manageSpreadsheetDisabled}\r\n            />\r\n\r\n            <CustomButton\r\n              variant={submitDisabled ? \"secondary\" : \"primary\"}\r\n              disabled={submitDisabled}\r\n              size=\"lg\"\r\n              onClick={() => setModalShow(true)}\r\n              text=\"Submit\"\r\n            />\r\n          </div>\r\n        </Stack>\r\n      </Stack>\r\n\r\n      {/* Content Errors Modal */}\r\n      <ContentErrorsModal\r\n        show={showContentErrors}\r\n        onHide={() => setShowContentErrors(false)}\r\n        errors={errors}\r\n      />\r\n\r\n      {/* Confirmation Modal */}\r\n\r\n      <ConfirmationModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        onConfirm={handleConfirmSubmit}\r\n      />\r\n\r\n      {/* Column Mapping */}\r\n\r\n      <ColumnMappingModal\r\n        show={showSpreadsheetModal}\r\n        onHide={() => setShowSpreadsheetModal(false)}\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        existingMappings={formattedData?.mappings ? formattedData.mappings : {}}\r\n        onColumnsMapped={(mappings, finalMapping) => {\r\n          console.log(\"Column mappings received:\", mappings);\r\n\r\n          // Store the column mappings\r\n          const columnMappings = mappings;\r\n\r\n          // Transform the sheet data using the column mappings\r\n          if (formattedData && formattedData.originalData) {\r\n            const transformedData = transformSheetDataWithMappings(\r\n              formattedData.originalData,\r\n              columnMappings,\r\n              operationChoice,\r\n              mappedAttributes // Pass mappedAttributes here\r\n            );\r\n\r\n            setFormattedData(transformedData);\r\n            showSuccessToast(\r\n              `Data mapped successfully with ${\r\n                Object.keys(mappings).length\r\n              } columns`\r\n            );\r\n          } else {\r\n            showErrorToast(\r\n              \"No sheet data available to transform with mappings\"\r\n            );\r\n          }\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MassUpload;\r\n","import { MSG_DROPDOWN_NOT_SELECTED } from \"./toastMessages\";\r\n\r\nexport const downloadTemplate = (showErrorToast) => (operationChoice) => {\r\n  let url = \"\";\r\n  switch (operationChoice) {\r\n    case \"1\": // Physical Product/Raw Material\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"2\": // Physical Product Structure\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductStructureSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"3\": // Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"4\": // Physical Product-Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProduct-DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    default:\r\n      showErrorToast(MSG_DROPDOWN_NOT_SELECTED);\r\n      return;\r\n  }\r\n  window.open(url, \"_blank\");\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\nimport MassUpload from \"./pages/mass-upload/massUpload\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <MassUpload />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n"],"names":["_ref","variant","message","show","className","_jsx","Alert","children","size","type","disabled","onClick","title","text","imageSrc","props","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","src","alt","style","width","height","marginRight","Loader","onHide","footerButtons","Modal","centered","Header","closeButton","Title","Body","Footer","map","btn","index","label","errors","processedErrors","useMemo","errorGroups","reduce","groups","error","rowMatch","match","columnMatch","errorMsg","split","slice","join","rowNumber","columnName","includes","columns","push","Object","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","parent","CellMeasurer","columnIndex","rowIndex","column","i","err","ReusableAlert","_Fragment","length","AutoSizer","_ref3","List","rowCount","rowHeight","deferredMeasurementCache","console","log","CustomModal","ErrorPopup","useToast","showToast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","transition","Bounce","progress","otherOptions","toast","showSuccessToast","options","arguments","undefined","showErrorToast","showInfoToast","showWarningToast","useToastWithProgress","showToastWithProgress","showSuccessToastWithProgress","showErrorToastWithProgress","showInfoToastWithProgress","showWarningToastWithProgress","forwardRef","ref","fileTypes","multiple","onUpload","onReset","files","setFiles","useState","useImperativeHandle","handleClearFiles","skipSuccessToast","handleClearFile","current","concat","FileUploader","handleChange","selectedFiles","fileArray","name","types","hoverTitle","file","display","alignItems","background","border","cursor","color","opacity","validateFile","collabSpaceTitles","selectedOperation","Promise","resolve","reject","_config$MassUpload$ma","_config$MassUpload$ma2","operation","fileName","matchedOperation","expectedHeaders","config","fileHeaders","mandatoryAttributes","headers","Array","isArray","reader","FileReader","readAsBinaryString","onload","async","workbook","XLSX","e","target","result","dense","cellDates","cellNF","cellText","sheetName","SheetNames","worksheet","Sheets","uploadedHeaders","sheet_to_json","header","every","isTemplateMismatch","allSheetData","defval","chunks","data","chunkSize","processDataInChunks","validationErrors","invalidPrefixes","errorStats","mandatory","collabSpace","einPrefix","docPrefix","lowerCaseCollabSpaceTitles","toLowerCase","chunkIndex","chunk","Math","round","forEach","row","indexInChunk","globalRowIndex","field","toString","trim","_row$CollaborativeSp","userCollabSpace","firstRow","levelValue","levelStr","String","valueToValidate","_row$columnName","some","prefix","startsWith","_row$columnName2","_row$columnName3","quantityValue","numQuantity","isNaN","processedRows","totalRows","currentErrors","collaborativeSpace","documentPrefix","total","byType","sheetData","onerror","selectedValue","onChange","Form","Select","value","defaultLabel","list","option","attrIndex","onConfirm","columnHeaders","handleSelectChange","dropdownOptions","Table","bordered","currentMapping","filteredOptions","CustomSelect","uiLabel","useMassUpload","mappedAttributes","setMappedAttributes","ENOVIA_BASE_URL","process","fetchColumnMapping","_metadataResponse$out","_metadataResponse$out2","_metadataResponse$out3","_attributeResponse$ou","_attributeResponse$ou2","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","metadataResponse","callEnoviaWebService","output","Error","member","objectId","id","attributeResponse","busIDs","groupData","results","item","nls","systemAttributes","groupNLS","attributeGroups","apiNlsValues","systemNlsValues","allNLSValues","Set","filteredGroupData","filter","attr","relevantAttributes","deploymentExtension","mappedData","backendName","group","attributesByGroup","find","useEffect","refreshMapping","selectedMappings","setSelectedMappings","keys","StaticTable","hasNLS","warn","normalizedHeader","hasMatch","hasMatchingNLS","isMandatory","columnHeader","opt","getBackendNameForUILabel","prev","mappedAttribute","currentColumnHeader","selectedValues","entries","_","mapping","prepareDropdownOptions","onColumnsMapped","existingMappings","errorMessage","handleOkClick","completeMappings","simplifiedMappings","specialMappings","userMapping","autoMapped","existingMapping","isSpecialColumn","matchingOption","getBackendNameForHeader","finalMapping","columnMappings","totalColumns","groupEnd","MappedList","useFetchDocumentData","documentData","setDocumentData","API_URL","fetchDocumentData","body","response","status","documentInfo","refreshData","API_ENDPOINTS","transformSheetDataWithMappings","operationType","mappedAttributesData","attributeGroupMap","transformedItems","transformedRow","_mappedData$find","uiLabelBackendName","Description","Type","path","getPathForAttribute","pathParts","part","productTypeColumn","productType","JSON","stringify","totalChunks","totalItems","originalData","mappings","generateColumnMappings","systemAttributeMappings","isSpecial","systemAttrKey","MassUpload","collabTitles","setCollabTitles","modalShow","setModalShow","errorModalShow","setErrorModalShow","showContentErrors","setShowContentErrors","showSpreadsheetModal","setShowSpreadsheetModal","isValidating","setIsValidating","operationChoice","setOperationChoice","setErrors","setColumnHeaders","setMandatoryAttributes","fileUploaderRef","useRef","formattedData","setFormattedData","globalCollabSpaceTitles","handleReset","selectElement","document","querySelector","submitDisabled","manageSpreadsheetDisabled","isFileUploadDisabled","Stack","gap","direction","Group","controlId","Control","CustomButton","handleDownloadTemplate","url","MSG_DROPDOWN_NOT_SELECTED","window","open","downloadTemplate","FileUpload","validationResult","setTimeout","transformedData","errorResponse","responseErrors","responseHeaders","responseMandatoryAttributes","Check","handleOpenSpreadsheetModal","ContentErrorsModal","ConfirmationModal","endpoint","successCount","failureCount","api","post","items","finalMessage","ColumnMappingModal","root","widget","hasOnLoadRun","addEvent","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","store","ToastContainer","start","securityContext1","getValue","WAFData","loadWAFData","csrfURL","authenticatedRequest","method","onComplete","onFailure","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue"],"sourceRoot":""}