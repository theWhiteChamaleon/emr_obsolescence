{"version":3,"file":"static/js/716.f9e3a0b1.chunk.js","mappings":"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","sources":["components/Alert/ReusableAlert.jsx","components/Modal/customModal.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","services/api/PlantAssignment/createMFGCA.js","pages/plantAssignment/plantAssignment.jsx","pages/plantAssignment/plantIndex.js"],"sourcesContent":["import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_OPRATION_HANDLE_ON_STATE_ERROR\r\n} from \"../../utils/toastMessages\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport AvailablePlant from \"../../components/Popup/Popup\";\r\nimport { useRef } from \"react\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n  type,\r\n  isMFGCA,\r\n  CAData\r\n}) => {\r\n  const { showWarningToast, showSuccessToast } = useToast();\r\n  const isStateBlocked = (currentState) => {\r\n    return currentState === \"Approved\" || currentState === \"In Approval\" || currentState === \"Completed\";\r\n  };\r\n  const [addPlantPopup, setAddPlantPopup] = useState(false);\r\n  const availablePlantRef = useRef();\r\n\r\n  const handleSaveClick = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n\r\n    if (onSave && (type === \"Change Action\" || CAName)) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (isStateBlocked(state)) {\r\n      showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n      return;\r\n    }\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    if (type === \"Change Action\") {\r\n      if (data.length > 0) {\r\n        onAddPlant(data);\r\n        addedPlant(data);\r\n      }\r\n    } else {\r\n      if (data.length > 0) {\r\n        const newItems = data.map((title) => ({\r\n          title: title, // Use the title as Plant (or replace with actual data)\r\n          Seq: \"1\",\r\n          Status: \"Pending\",\r\n          \"MFG Change\": \"N/A\",\r\n          \"MFG Status\": \"N/A\",\r\n          Change: CAData.CAName,\r\n          \"Change Status\": CAData.CAStatus,\r\n          \"Oracle Template\": \"N/A\",\r\n          \"ERP Status\": \"Active\",\r\n          \"ERP Export\": \"Yes\",\r\n          \"Lead Plant\": \"false\",\r\n          MBom: \"N/A\",\r\n          \"Sort Value\": \"\",\r\n        }));\r\n        onAddPlant(newItems);\r\n\r\n        addedPlant(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex cta-absolute\">\r\n        {!isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (isStateBlocked(state)) {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n                return;\r\n              }\r\n\r\n              if (type === \"Change Action\") {\r\n                setAddPlantPopup(true);\r\n              } else if (CAName) {\r\n                setAddPlantPopup(true); // Open the modal if CAName is present\r\n              } else if (state === \"RELEASED\") {\r\n                showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR); // Show warning if state is RELEASED\r\n              } else {\r\n                showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR); // Show warning if CAName is missing\r\n              }\r\n            }}\r\n          >\r\n            Add Plant\r\n          </button>\r\n        )}\r\n        {isMFGCA && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={() => {\r\n              if (state === \"Approved\" || state === \"In Approval\" || state === \"Completed\") {\r\n                showWarningToast(MSG_OPRATION_HANDLE_ON_STATE_ERROR);\r\n              } else {\r\n                setAddPlantPopup(true);\r\n              }\r\n            }}\r\n          >\r\n            Add/Update Plants\r\n          </button>\r\n        )}\r\n\r\n        {type === \"Change Action\" && (\r\n          <button\r\n            className=\"btn btn-outline-success btn-lg m-2\"\r\n            onClick={handleSaveClick}\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n        {!isMFGCA && (\r\n        <button\r\n          className=\"btn btn-outline-danger btn-lg m-2\"\r\n          onClick={handleRemove}\r\n        >\r\n          Remove\r\n        </button>\r\n        )}\r\n      </div>\r\n\r\n      <CustomModal\r\n        show={addPlantPopup}\r\n        onHide={() => setAddPlantPopup(false)}\r\n        title=\"Available Plant\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Add\",\r\n            variant: \"primary\",\r\n            onClick: () => {\r\n              availablePlantRef.current?.addPlant(); // Call addPlant\r\n              setAddPlantPopup(false);\r\n            },\r\n          },\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setAddPlantPopup(false),\r\n          },\r\n        ]}\r\n      >\r\n        <div className=\"modal-body\">\r\n          <AvailablePlant\r\n            ref={availablePlantRef} // Attach the ref\r\n            data={uniquedata} // if isMFGCA is true, pass uniquedata; else, pass empty array\r\n            columns={uniqueColumn}\r\n            CAName={CAName}\r\n            addedItem={handleData}\r\n            state={state}\r\n          />\r\n        </div>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./plantAssignment.css\";\r\n\r\nconst DragAndDropComponent = ({\r\n  handleFileInputChange,\r\n  fileInputRef,\r\n  isFileInputDisabled,\r\n  handleSubmit,\r\n  isCreateButtonDisabled,\r\n  handleReset,\r\n}) => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"65px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n        <div class=\"mt-3\">\r\n          <div class=\"row justify-content-center\">\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button\r\n                variant=\"link ms-auto\"\r\n                onClick={() => {\r\n                  const link = document.createElement(\"a\");\r\n                  link.href =\r\n                    \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                  link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                  link.click();\r\n                }}\r\n              >\r\n                Download Template\r\n              </Button>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Form.Group controlId=\"formFileMultiple\">\r\n                <Form.Control\r\n                  type=\"file\"\r\n                  multiple\r\n                  onChange={handleFileInputChange}\r\n                  disabled={isFileInputDisabled}\r\n                  ref={fileInputRef} // Attach the ref to the file input\r\n                />\r\n              </Form.Group>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                <FontAwesomeIcon icon={faRotateLeft} />\r\n              </Button>\r\n            </div>\r\n            <div class=\"col-6 col-md-auto mb-2\">\r\n              <div\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  cursor: isCreateButtonDisabled ? \"not-allowed\" : \"pointer\", // Apply cursor style to the wrapper div\r\n                }}\r\n              >\r\n                <Button\r\n                  // variant=\"outline-primary\"\r\n                  variant={\r\n                    isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                  }\r\n                  onClick={handleSubmit}\r\n                  disabled={isCreateButtonDisabled} // Disable the button\r\n                >\r\n                  Create Manufacturing CA\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import * as XLSX from \"xlsx\";\r\nimport { getAllPlants } from \"./allPlantSevice\";\r\nimport { fetchCsrfToken } from \"./fetchCsrfService\";\r\nimport axios from \"axios\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\n// Import useToastWithProgress\r\n \r\n// const { showSuccessToastWithProgress, showErrorToastWithProgress } = useToastWithProgress();\r\n \r\n \r\nconst fetchData = async (\r\n  url,\r\n  body = null,\r\n  method = \"GET\"\r\n  // headers = {}\r\n) => {\r\n  console.log(\"Fetching URL:\", url);\r\n  console.log(\"Method is:\");\r\n  console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n \r\n  try {\r\n    const response = await axios({\r\n      url,\r\n      method,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      data: body, // Include body only if provided\r\n    });\r\n \r\n    console.log(\"Response received:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Request failed:\", error);\r\n    throw error; // Propagate the error to the caller\r\n  }\r\n};\r\n// Function to create the manufacturing CA body from Excel data and allPlants\r\nexport const createManufacturingCABody = async (\r\n  excelData,\r\n  allPlantsData,\r\n  companyName,\r\n  collabSpace\r\n) => {\r\n  const items = [];\r\n  const uniquePlantTitles = new Set();\r\n \r\n  for (let i = 1; i < excelData.length; i++) {\r\n    const row = excelData[i];\r\n    if (row.length >= 2 && row[0] && row[1]) {\r\n      const itemName = row[0].toString().trim();\r\n      const plantsList = row[1].toString().includes(\",\")\r\n        ? row[1]\r\n            .toString()\r\n            .split(\",\")\r\n            .map((p) => p.trim())\r\n        : [row[1].toString().trim()];\r\n      items.push({\r\n        name: itemName,\r\n        plants: plantsList,\r\n      });\r\n      plantsList.forEach((plant) => uniquePlantTitles.add(plant));\r\n    }\r\n  }\r\n \r\n  const parentPlants = [];\r\n  uniquePlantTitles.forEach((plantTitle) => {\r\n    const matchedPlant = allPlantsData.find((plant) => {\r\n      const normalizedTitle = plant.title.replace(/^Plant\\s+/, \"\");\r\n      return normalizedTitle === plantTitle || plant.title === plantTitle;\r\n    });\r\n    if (matchedPlant) {\r\n      parentPlants.push({\r\n        PlantName: matchedPlant.title.replace(/^Plant\\s+/, \"\"),\r\n        PlantID: matchedPlant.id,\r\n      });\r\n    }\r\n  });\r\n \r\n  return {\r\n    CATitle: \"FromAutomation\",\r\n    CAOrganization: companyName, // company name credentials\r\n    CACollabSpace: collabSpace, // from credentials\r\n    CAOwner: \"e1331143\",\r\n    Items: items,\r\n    ParentPlants: parentPlants,\r\n  };\r\n};\r\n \r\n// Function to make the API call\r\nexport const callManufacturingCAApi = async (body) => {\r\n  const manufacturingCAUrl =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/createMFGCA\";\r\n \r\n // console.log(\"Headers for Manufacturing CA API:\", CAHeaders);\r\n \r\n  const response = await fetchData(\r\n    manufacturingCAUrl,\r\n    body,\r\n    \"POST\"\r\n  );\r\n  console.log(\"Manufacturing CA Response:\", JSON.stringify(response));\r\n  return response;\r\n};\r\n \r\n// Function to handle file change (only validation)\r\nexport const handleFileChange = async (\r\n  event,\r\n  setValidationErrors,\r\n  setShowErrorsModal,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n  setValidatedData, // New parameter to store validated data\r\n  setSelectedFiles,\r\n  setIsCreateButtonDisabled\r\n) => {\r\n \r\n  console.log(\"[handleFileChange] Function triggered\");\r\n \r\n  const files = event.target.files;\r\n  const validExtensions = [\r\n    \"application/vnd.ms-excel\",\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  ]; // MIME types for .xls and .xlsx\r\n \r\n  // Check if all files are valid Excel files\r\n  const invalidFiles = Array.from(files).filter(\r\n    (file) =>\r\n      !validExtensions.includes(file.type) &&\r\n      !file.name.toLowerCase().endsWith(\".xls\") &&\r\n      !file.name.toLowerCase().endsWith(\".xlsx\")\r\n  );\r\n \r\n  if (invalidFiles.length > 0) {\r\n    showErrorToast(\"Only Excel files (.xls, .xlsx) can be uploaded\");\r\n    event.target.value = \"\"; // Reset the file input\r\n    setIsCreateButtonDisabled(true); // Disable the button if invalid files are present\r\n    return;\r\n  }\r\n \r\n  const file = files[0];\r\n  const reader = new FileReader();\r\n \r\n  reader.onload = async (e) => {\r\n    const data = new Uint8Array(e.target.result);\r\n    const workbook = XLSX.read(data, { type: \"array\" });\r\n    const sheetName = workbook.SheetNames[0];\r\n    const sheet = workbook.Sheets[sheetName];\r\n    const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Get data as a 2D array\r\n \r\n    console.log(\"Parsed Excel Data:\", jsonData);\r\n \r\n    // Validation: Check if the file is empty\r\n    if (jsonData.length === 0) {\r\n      showErrorToast(\"File is empty\");\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n \r\n   \r\n \r\n    // Validation: Check if headers match \"Item\" and \"Plants\"\r\n    const normalizedHeaders = jsonData[0].map((header) =>\r\n      header?.toString().trim().toLowerCase()\r\n    ); // Normalize headers\r\n    console.log(\"Normalized Headers:\", normalizedHeaders);\r\n \r\n    if (normalizedHeaders[0] !== \"item\" || normalizedHeaders[1] !== \"plants\") {\r\n      showErrorToast(\r\n        \"File headers are incorrect. Expected headers: 'Item' and 'Plants'\"\r\n      );\r\n      setIsCreateButtonDisabled(true);\r\n      return;\r\n    }\r\n \r\n    // Validation: Check if the file contains only headers and no data\r\n    if (jsonData.length === 1) {\r\n      showErrorToast(\"No data present in the file. Only headers are present.\");\r\n      return;\r\n    }\r\n \r\n    const errors = [];\r\n    for (let i = 1; i < jsonData.length; i++) {\r\n      const row = jsonData[i];\r\n      const item = row[0];\r\n      const plants = row[1];\r\n \r\n      if (!item && plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Item\",\r\n          errorDescription: \"Items can't be empty\",\r\n        });\r\n      }\r\n \r\n      if (item && !plants) {\r\n        errors.push({\r\n          rowNumber: i + 1,\r\n          columnName: \"Plants\",\r\n          errorDescription: \"Plants value is missing\",\r\n        });\r\n      }\r\n    }\r\n \r\n    console.log(\"Validation Errors:\", errors);\r\n \r\n    if (errors.length > 0) {\r\n      const formattedErrors = errors.map(\r\n        (error) =>\r\n          `Row ${error.rowNumber}: \"${error.columnName}\" value ${error.errorDescription}`\r\n      );\r\n \r\n      console.log(\"[createMFGCA.js] Formatted Errors:\", formattedErrors);\r\n \r\n      setValidationErrors(formattedErrors);\r\n      setShowErrorsModal(true);\r\n      setIsCreateButtonDisabled(true);\r\n    } else {\r\n      showSuccessToast(\"File uploaded successfully with no errors\");\r\n      setValidatedData(jsonData); // Store validated data for further processing\r\n      setSelectedFiles(file);// Update selectedFiles state only after successful validation\r\n      setIsCreateButtonDisabled(false);\r\n    }\r\n  };\r\n \r\n  reader.onerror = () => {\r\n    showErrorToast(\"Failed to read the file. Please try again.\");\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n \r\n  reader.readAsArrayBuffer(file);\r\n};\r\n \r\n// New function to process Manufacturing CA\r\nexport const processManufacturingCA = async (\r\n  validatedData,\r\n  showSuccessToastWithProgress,\r\n  showErrorToastWithProgress,\r\n  handleReset\r\n) => {\r\n  try {\r\n \r\n    const csrfTokenHeaders = await fetchCsrfToken();\r\n    const CAHeaders = {\r\n      \"Content-Type\": \"application/json\",\r\n      ...csrfTokenHeaders\r\n    };\r\n    let credentials = window.widget.getValue(\"Credentials\");\r\n    console.log(\"credentials createMFGCA\", credentials);\r\n    const credentialsParts = credentials.split(\".\");\r\n    console.log(\"credentialsParts\", credentialsParts);\r\n    const companyName = credentialsParts[1]; // Value after the first dot\r\n    console.log(\"Company Name:\", companyName);\r\n    const collabSpace = credentialsParts[2]; // Value after the second dot\r\n \r\n    console.log(\"Collab Space:\", collabSpace);\r\n \r\n    const allPlantsData = await getAllPlants([collabSpace], CAHeaders, \"\");\r\n    console.log(\"Fetched allPlantsData:\", allPlantsData);\r\n \r\n    const manufacturingCABody = await createManufacturingCABody(\r\n      validatedData,\r\n      allPlantsData,\r\n      companyName,\r\n      collabSpace\r\n    );\r\n    console.log(\r\n      \"[processManufacturingCA] Manufacturing CA Body (JSON):\",\r\n      JSON.stringify(manufacturingCABody, null, 2)\r\n    );\r\n \r\n    // Pass headers to callManufacturingCAApi\r\n    const response = await callManufacturingCAApi(\r\n      manufacturingCABody\r\n    );\r\n    console.log(\"[processManufacturingCA] Manufacturing CA API Response:\", response);\r\n \r\n    // Extract CAName from the response\r\n    const CAName = response?.CAName ;\r\n    //showSuccessToastWithProgress(`Manufacturing CA created successfully! Name: ${CAName}`);\r\n    showSuccessToastWithProgress(\r\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n    <span>\r\n      Manufacturing CA created successfully! Name: <strong>{CAName}</strong>\r\n    </span>\r\n    <button\r\n      onClick={(event) => {\r\n        event.stopPropagation(); // Prevent the toast from closing\r\n        navigator.clipboard.writeText(CAName); // Copy the CAName to clipboard\r\n      }}\r\n      style={{\r\n        background: \"none\",\r\n        border: \"none\",\r\n        cursor: \"pointer\",\r\n        marginLeft: \"8px\",\r\n        color: \"grey\",\r\n      }}\r\n      title=\"Copy CA Name\"\r\n    >\r\n      <FaRegCopy size={14} />\r\n    </button>\r\n  </div>\r\n    );\r\n    handleReset();\r\n    // showSuccessToast(\"Manufacturing CA created successfully!\");\r\n  } catch (error) {\r\n    console.error(\"Error in processManufacturingCA:\", error);\r\n    showErrorToastWithProgress(\"Failed to create Manufacturing CA. Please try again.\");\r\n  }\r\n};","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Button, Form, Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport store from \"../../store\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\n\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setCAItemDetails,\r\n  setCAItemObjectDetails,\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast, { useToastWithProgress } from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport {\r\n  handleAddData,\r\n  handleRemoveData,\r\n  saveData,\r\n} from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport { getAllPlants } from \"../../services/api/PlantAssignment/allPlantSevice\";\r\nimport axios from \"axios\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport {\r\n  handleFileChange,\r\n  processManufacturingCA,\r\n} from \"../../services/api/PlantAssignment/createMFGCA\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faRotateLeft } from \"@fortawesome/free-solid-svg-icons\"; // This is the reset-style icon\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst PlantAssignment = () => {\r\n  const { showSuccessToastWithProgress, showErrorToastWithProgress } =\r\n    useToastWithProgress();\r\n  const [isAddingPlant, setIsAddingPlant] = useState(false); // State for loader\r\n  const [validatedData, setValidatedData] = useState(null);\r\n  const [showErrorsModal, setShowErrorsModal] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]); // State to store validation errors\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  const [CAItemDetailsTable, setCAItemDetailsTable] = useState([]);\r\n  const [isFileInputDisabled, setIsFileInputDisabled] = useState(false); // New state to disable file input\r\n  const [isCreateButtonDisabled, setIsCreateButtonDisabled] = useState(true); // New state to control button enablement\r\n  const { handleDrop } = usePlantDropableArea(); // 🔁 same as WidgetLifecycle\r\n\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [isRemoveMode, setIsRemoveMode] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  let securityContext1 = window.widget.getValue(\"Credentials\");\r\n  console.log(\"Security context is: \", securityContext1);\r\n\r\n  const fileInputRef = useRef(null); // Create a ref for the file input\r\n\r\n  const handleFileInputChange =  (event) => {\r\n     handleFileChange(\r\n      event,\r\n      setValidationErrors,\r\n      setShowErrorsModal,\r\n      showErrorToast, // Pass toast functions\r\n      showSuccessToast,\r\n      setValidatedData,\r\n      setSelectedFiles,\r\n      setIsCreateButtonDisabled\r\n    ).finally(() => {\r\n      setScreenLoader(false); // Hide loader after validation is complete\r\n    });\r\n\r\n \r\n\r\n    setIsFileInputDisabled(true);\r\n    // setIsCreateButtonDisabled(false); // Enable the \"Create Manufacturing CA\" button\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n    extractPlantData(tableData);\r\n    setScreenLoader(true);\r\n\r\n    if (type === \"Change Action\") {\r\n      if (isMFGCA === true) {\r\n        console.log(\"Manufacturing CA Save Called\");\r\n        const response = await getSaveDataForManufacturingCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      } else {\r\n        console.log(\"Engineering CA Save Called\");\r\n\r\n        const response = await getSaveDataForCA(\r\n          tableData,\r\n          droppedObjectData,\r\n          CAItemDetails\r\n        );\r\n\r\n        console.log(\"response from Save Api is :\", response);\r\n        if (response) {\r\n          const updatedCADetails = tableData.map((tableItem) => {\r\n            const originalItem = CAItemDetails.find(\r\n              (item) => item.ItemId === tableItem.ItemId\r\n            );\r\n\r\n            return {\r\n              ItemId: tableItem.ItemId,\r\n              ItemType: originalItem?.ItemType,\r\n              ItemState: originalItem?.ItemState,\r\n              ItemTitle: tableItem.ItemName,\r\n              ItemPlants: tableItem.Plant.map(({ PlantName, PlantID }) => ({\r\n                PlantName,\r\n                PlantID,\r\n              })),\r\n            };\r\n          });\r\n\r\n          dispatch(setCAItemDetails(updatedCADetails));\r\n\r\n          // ✅ Silent refresh after save to update Redux/UI\r\n          const droppedItems =\r\n            store.getState().droppedObject.droppedObjectData.initialDraggedData\r\n              ?.data?.items;\r\n          if (droppedItems?.length) {\r\n            await refreshWidgetData(droppedItems, handleDrop);\r\n          }\r\n\r\n          setScreenLoader(false);\r\n        } else {\r\n          console.warn(\"Save API returned false\");\r\n          setScreenLoader(false);\r\n        }\r\n      }\r\n    } else {\r\n      await onSave(tableData); // Pass tableData when calling onSave\r\n    }\r\n  };\r\n  const handleRemove = async () => {\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Remove is clicked for Chnage Action\");\r\n      setIsRemoveMode((prev) => !prev); // ✅ Toggles the mode\r\n    } else {\r\n      console.log(\"Selected Table Rows:\", selectedTableRows);\r\n      console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n      if (selectedTableRows.length > 0) {\r\n        // Extract IDs or titles of selected rows\r\n        const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n        console.log(\"Selected Titles:\", selectedTitles);\r\n        const removedTitles = selectedTitles.map((title) => ({\r\n          title: title,\r\n        }));\r\n        console.log(\"Removed Titles:\", removedTitles);\r\n        const updatedTableData = tableData.filter(\r\n          (row) => !selectedTitles.includes(row.Plant)\r\n        );\r\n        console.log(\"updateTableData\", updateTableData);\r\n        if (updateTableData) {\r\n          setTableData(updatedTableData);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n        }\r\n\r\n        // // Update state\r\n\r\n        setUniqueData((prevUniquePlants) => [\r\n          ...prevUniquePlants,\r\n          ...removedTitles,\r\n        ]); // Add removed items back to uniqueData\r\n        //added by ayush\r\n        showSuccessToastWithProgress(\r\n          \"Plants removed successfully from the table.\"\r\n        );\r\n        await handleRemoveData(\r\n          allPlants,\r\n          removedTitles,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type\r\n        );\r\n      } else {\r\n        showErrorToastWithProgress(\"Please select at least one row to remove.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // NEED TO WORK HERE FOR THE UNIQUE PLANTS FOR CA\r\n\r\n  const handleRemovePlant = useCallback(\r\n    (itemId, plantId) => {\r\n      setCAItemDetailsTable((tableData) =>\r\n        tableData.map((item) =>\r\n          item.ItemId === itemId\r\n            ? {\r\n                ...item,\r\n                ItemPlants: item.ItemPlants.map((plant) =>\r\n                  plant.PlantID === plantId\r\n                    ? {\r\n                        ...plant,\r\n                        color: plant.color === \"red\" ? \"green\" : \"red\", // ✅ toggle\r\n                      }\r\n                    : plant\r\n                ),\r\n              }\r\n            : item\r\n        )\r\n      );\r\n    },\r\n    [setCAItemDetailsTable]\r\n  );\r\n\r\n  const handleAdded = async (data) => {\r\n    setIsAddingPlant(true);\r\n    console.log(\"Data Received\", data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    console.log(\"CA Table data is\", CAItemDetails);\r\n\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n\r\n    if (type === \"Change Action\") {\r\n      console.log(\"Change Action Plant is Added\");\r\n\r\n      setCAItemDetailsTable((prev) => {\r\n        return prev.map((row) => {\r\n          const shouldUpdate =\r\n            selectedTableRows.length === 0 ||\r\n            selectedTableRows.some((r) => r.ItemId === row.ItemId);\r\n\r\n          if (!shouldUpdate) return row;\r\n\r\n          const reduxRow = CAItemDetails.find((r) => r.ItemId === row.ItemId);\r\n          const reduxPlants = reduxRow?.ItemPlants || [];\r\n          const existingPlants = row.ItemPlants || [];\r\n\r\n          const updatedExistingPlants = existingPlants.map((ep) => {\r\n            const shouldUpdateColor =\r\n              isMFGCA &&\r\n              data.includes(ep.PlantName.trim()) &&\r\n              reduxPlants.some(\r\n                (rp) => rp.PlantName.trim() === ep.PlantName.trim()\r\n              );\r\n\r\n            return shouldUpdateColor ? { ...ep, color: \"red\" } : ep;\r\n          });\r\n\r\n          const newPlantsToAdd = [];\r\n\r\n          data.forEach((plantName) => {\r\n            const matchedPlant = CAAllPlants.find((plant) => {\r\n              const formattedTitle = plant.title\r\n                .replace(/^Plant\\s+/, \"\")\r\n                .trim();\r\n              return formattedTitle === plantName.trim();\r\n            });\r\n\r\n            if (!matchedPlant) return;\r\n\r\n            const existsInRedux = reduxPlants.some(\r\n              (rp) => rp.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            const existsInTable = existingPlants.some(\r\n              (ep) => ep.PlantName.trim() === plantName.trim()\r\n            );\r\n\r\n            if (!existsInTable) {\r\n              newPlantsToAdd.push({\r\n                PlantName: plantName,\r\n                PlantID: matchedPlant.id,\r\n                PlantERPStatus: \"Pending\", // ✅ This now controls remove visibility\r\n                // ...(isMFGCA && { color: existsInRedux ? \"red\" : \"green\" }),\r\n                ...(existsInRedux ? { color: \"red\" } : { color: \"green\" }),\r\n              });\r\n            }\r\n          });\r\n\r\n          return {\r\n            ...row,\r\n            ItemPlants: [...updatedExistingPlants, ...newPlantsToAdd],\r\n          };\r\n        });\r\n      });\r\n    } else {\r\n      setScreenLoader(true);\r\n      console.log(\"Handling plants for table addition...\");\r\n\r\n      // Fetch ErrorObject and Finalmessage from handleAddData\r\n\r\n      try {\r\n        const { ErrorObject, Finalmessage } = await handleAddData(\r\n          data,\r\n          allPlants,\r\n          droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n          type,\r\n          proposedChanges,\r\n          productChildren,\r\n          hasMBOM\r\n        );\r\n        console.log(\"ErrorObject from handleAddData:\", ErrorObject); // Log the ErrorObject\r\n        console.log(\"Finalmessage from handleAddData:\", Finalmessage); // Log the Finalmessage\r\n\r\n        // Check if any of the selected plants are in the ErrorObject\r\n        const erroredPlants = ErrorObject.map(\r\n          (item) => allPlants.find((plant) => plant.id === item.ClassID)?.title\r\n        );\r\n        console.log(\"Errored Plants:\", erroredPlants); // Log the errored plants\r\n\r\n        // Separate valid and invalid plants based on the ErrorObject\r\n        const validPlants = data.filter(\r\n          (plant) => !erroredPlants.includes(plant.title)\r\n        );\r\n        const invalidPlants = data.filter((plant) =>\r\n          erroredPlants.includes(plant.title)\r\n        );\r\n        console.log(\"Valid Plants:\", validPlants); // Log the valid plants\r\n        console.log(\"Invalid Plants:\", invalidPlants); // Log the invalid plants\r\n\r\n        // Show an alert only for the invalid plants that were selected\r\n        if (invalidPlants.length > 0) {\r\n          //show final message in toast\r\n          if (Finalmessage) {\r\n            showErrorToastWithProgress(Finalmessage, {\r\n              // autoClose: false, // Prevent auto-closing\r\n              // closeOnClick: false, // Prevent closing on click\r\n            });\r\n          }\r\n\r\n          console.log(\"Finalmessage displayed in toast:\", Finalmessage);\r\n        }\r\n\r\n        // Update the unique plants list to include invalid plants (keep them in the popup)\r\n        setUniqueData((prevUniqueData) => [\r\n          ...prevUniqueData,\r\n          ...invalidPlants.map((plant) => ({ title: plant.title })),\r\n        ]);\r\n\r\n        // Add valid plants to the table\r\n        if (validPlants.length > 0) {\r\n          setTableData((prev) => [\r\n            ...validPlants.map(({ title, ...rest }) => ({\r\n              Plant: title,\r\n              ...rest,\r\n            })),\r\n            ...prev,\r\n          ]);\r\n          setTableKey((prevKey) => prevKey + 1); // Update table key\r\n          showSuccessToastWithProgress(\"Plants added successfully.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while adding plants:\", error);\r\n        showErrorToastWithProgress(\"Failed to add plants. Please try again.\");\r\n      } finally {\r\n        // setIsAddingPlant(false); // Hide loader when adding is complete\r\n        setScreenLoader(false); //Hide loader when adding is complete\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  // Add this function near the top of the file\r\n  const extractPlantData = (tableData) => {\r\n    const plantData = tableData.map((row) => ({\r\n      itemName: row.ItemName, // Replace with the actual key for Item Name\r\n      plantName: row.Plant, // Replace with the actual key for Plant Name\r\n    }));\r\n    console.log(\"Extracted Plant Data:\", plantData);\r\n    return plantData;\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  // Getting the CA dETAILS FROM rEDUX\r\n\r\n  const CAItemDetails = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAItemDetails\r\n  );\r\n  console.log(\"The CA Item Details are:\", CAItemDetails);\r\n\r\n  const CAAllPlants = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAallPlants\r\n  );\r\n  console.log(\"For CA all Plants are: \", CAAllPlants);\r\n  const CAHeaders = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAheaders\r\n  );\r\n  console.log(\"caheaders plant assign\", CAHeaders);\r\n\r\n  const isMFGCA = useSelector(\r\n    (state) => state.droppedObject.CAItemObjectDetails.CAisMFGCA\r\n  );\r\n  console.log(\"isMFGCA value is:\", isMFGCA);\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  // const handleFileInputChange = (event) => {\r\n  //   handleFileChange(event, allPlants, CAHeaders, setValidationErrors, setShowErrorsModal);\r\n  // };\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n\r\n  const CAData = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAData\r\n  );\r\n  console.log(\"The CAData is....:\", CAData);\r\n\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  const getUniquePlant = useCallback(() => {\r\n    let allPlants = CAAllPlants.map((item) =>\r\n      item.title.replace(/^Plant /, \"\")\r\n    );\r\n\r\n    const sourceData =\r\n      selectedTableRows.length === 0 ? tableData : selectedTableRows;\r\n\r\n    let assignedTablePlants = [\r\n      ...new Set(\r\n        sourceData.flatMap((item) => item.Plant?.map((p) => p.PlantName) || [])\r\n      ),\r\n    ];\r\n\r\n    let uniqueTablePlants = allPlants\r\n      .filter((plant) => !assignedTablePlants.includes(plant))\r\n      .map((plant) => ({ title: plant }));\r\n\r\n    console.log(\"Unique table plants are :\", uniqueTablePlants);\r\n\r\n    // Return allPlants if isMFGCA is true, else return uniqueTablePlants\r\n    return allPlants.map((plant) => ({ title: plant }));\r\n  }, [CAAllPlants, tableData, selectedTableRows, isMFGCA]); // Added isMFGCA as a dependency\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var hasMBOM = droppedObjectData.cardData[\"HasMBOM\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    if (type === \"Change Action\") {\r\n      setCAItemDetailsTable(CAItemDetails);\r\n    } else {\r\n      setAssignedPlant(asignedPlant);\r\n    }\r\n  }, [asignedPlant, type, CAItemDetails]);\r\n  // Runs only when type === \"Change Action\"\r\n  useEffect(() => {\r\n    if (type === \"Change Action\") {\r\n      setUniqueData(getUniquePlant());\r\n    }\r\n  }, [getUniquePlant, type]);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable || CAItemDetailsTable.length === 0) return;\r\n\r\n  //   // ✅ Always derive MFGCA from item MBOM, even if type is not \"Change Action\"\r\n  //   const isAnyMFG = CAItemDetailsTable.some(\r\n  //     (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //   );\r\n\r\n  //   if (isAnyMFG !== isMFGCA) {\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFG\r\n  //     }));\r\n  //   }\r\n  // }, [CAItemDetailsTable, isMFGCA, dispatch]);\r\n\r\n  // Runs only when type !== \"Change Action\"\r\n  useEffect(() => {\r\n    if (type !== \"Change Action\") {\r\n      setUniqueData(uniquePlant);\r\n    }\r\n  }, [uniquePlant, type]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(() => {\r\n    return type === \"Change Action\"\r\n      ? getTableData(CAItemDetailsTable, type, CAData)\r\n      : getTableData(assignedPlant, type, CAData);\r\n  }, [CAItemDetailsTable, assignedPlant, type, CAData]);\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  // useEffect(() => {\r\n  //   if (!type || !CAItemDetailsTable.length) return;\r\n\r\n  //   if (type === \"Change Action\") {\r\n  //     const isAnyMFGCA = CAItemDetailsTable.some(\r\n  //       (item) => item.ItemMBOM && item.ItemMBOM !== \"N/A\"\r\n  //     );\r\n\r\n  //     dispatch(setCAItemObjectDetails({\r\n  //       ...store.getState().droppedObject.CAItemObjectDetails,\r\n  //       CAisMFGCA: isAnyMFGCA,\r\n  //     }));\r\n\r\n  //     if (isAnyMFGCA) {\r\n  //       setIsRemoveMode(false); // 🚀 Immediately set RemoveMode false after confirming MFGCA\r\n  //     }\r\n  //   }\r\n  // }, [CAItemDetailsTable, type, dispatch]);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(\r\n    () => tableColumns(CAName, type, isRemoveMode, handleRemovePlant),\r\n    [CAName, type, isRemoveMode, handleRemovePlant]\r\n  );\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n        proposedChanges: [],\r\n        CAData: {},\r\n      })\r\n    );\r\n    dispatch(\r\n      setCAItemObjectDetails({\r\n        CAItemDetails: [],\r\n        CAallPlants: [],\r\n        CAisMFGCA: false,\r\n        CAheaders: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  const handleReset = () => {\r\n    // Reset all states related to file upload\r\n    setValidatedData(null);\r\n    setSelectedFiles(null);\r\n    setValidationErrors([]);\r\n    setShowErrorsModal(false);\r\n    setTableData([]);\r\n    setUniqueData([]);\r\n    setCAItemDetailsTable([]);\r\n    setAssignedPlant([]);\r\n    setDupInitialAssignedClasses([]);\r\n    setTableKey(0);\r\n\r\n    setIsFileInputDisabled(false);\r\n\r\n    // Clear the file input value using the ref\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = \"\"; // Reset the file input value\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button\r\n    setIsCreateButtonDisabled(true);\r\n\r\n    // Optionally show a toast message\r\n    //showSuccessToast(\"File upload has been reset.\");\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validatedData) {\r\n      showErrorToast(\"Please upload and validate a file before proceeding.\");\r\n      return;\r\n    }\r\n\r\n    setScreenLoader(true); // Show loader when the process starts\r\n\r\n    // const CAHeaders = await fetchCsrfToken(); // Fetch headers\r\n    try {\r\n      await processManufacturingCA(\r\n        validatedData,\r\n        showSuccessToastWithProgress,\r\n        showErrorToastWithProgress,\r\n        handleReset\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error in handleSubmit:\", error);\r\n    } finally {\r\n      setScreenLoader(false); // Hide loader after the process is complete\r\n    }\r\n\r\n    // Disable the \"Create Manufacturing CA\" button after submission\r\n    setIsCreateButtonDisabled(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* {isAddingPlant && <Loader />} */}\r\n\r\n      {screenLoader && <Loader />}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && (\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <DragAndDropComponent\r\n            handleFileInputChange={handleFileInputChange}\r\n            fileInputRef={fileInputRef}\r\n            isFileInputDisabled={isFileInputDisabled}\r\n            handleSubmit={handleSubmit}\r\n            isCreateButtonDisabled={isCreateButtonDisabled}\r\n            handleReset={handleReset}\r\n          />\r\n\r\n          {/* File Input & Submit Button Positioned at Bottom Center */}\r\n          {/* <div\r\n            style={{\r\n              padding: \"0px 0px 10px 0px\",\r\n              position: \"absolute\",\r\n              bottom: \"10px\", // Adjust as needed\r\n              left: \"50%\",\r\n              transform: \"translateX(-50%)\",\r\n              zIndex: 10,\r\n              display: \"flex\",\r\n              gap: \"10px\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div class=\"container mt-3\">\r\n              <div class=\"row justify-content-center\">\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button\r\n                    variant=\"link ms-auto\"\r\n                    onClick={() => {\r\n                      const link = document.createElement(\"a\");\r\n                      link.href =\r\n                        \"https://github.com/aayush825/EMR_PLANT_WIDGET/raw/main/plant_assignment_template.xlsx\"; // Use the raw file URL for direct download\r\n                      link.download = \"plant_assignment_template.xlsx\"; // Set the file name for the download\r\n                      link.click();\r\n                    }}\r\n                  >\r\n                    Download Template\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Form.Group controlId=\"formFileMultiple\">\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      multiple\r\n                      onChange={handleFileInputChange}\r\n                      disabled={isFileInputDisabled}\r\n                      ref={fileInputRef} // Attach the ref to the file input\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <Button variant=\"outline-danger\" onClick={handleReset}>\r\n                    <FontAwesomeIcon icon={faRotateLeft} />\r\n                  </Button>\r\n                </div>\r\n                <div class=\"col-6 col-md-auto mb-2\">\r\n                  <div\r\n                    style={{\r\n                      display: \"inline-block\",\r\n                      cursor: isCreateButtonDisabled\r\n                        ? \"not-allowed\"\r\n                        : \"pointer\", // Apply cursor style to the wrapper div\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      // variant=\"outline-primary\"\r\n                      variant={\r\n                        isCreateButtonDisabled ? \"secondary\" : \"outline-primary\"\r\n                      }\r\n                      onClick={handleSubmit}\r\n                      disabled={isCreateButtonDisabled} // Disable the button\r\n                    >\r\n                      Create Manufacturing CA\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            \r\n          </div>*/}\r\n        </div>\r\n      )}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && (\r\n                <CardWithDragAndDrop\r\n                  data={cardData}\r\n                  widgetType=\"PlantAssignment\"\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                  type={type}\r\n                  isMFGCA={isMFGCA}\r\n                  CAData={CAData}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  // meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {/* Show validation errors in ErrorDisplayTable\r\n       {validationErrors.length > 0 && (\r\n              <ErrorDisplayTable errors={validationErrors} />\r\n            )} */}\r\n      {/* Show validation errors in ContentErrorsModal */}\r\n      <ContentErrorsModal\r\n        show={showErrorsModal}\r\n        onHide={() => setShowErrorsModal(false)}\r\n        errors={validationErrors}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n\r\nexport const getSaveDataForManufacturingCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemPlants: item.Plant.filter((plant) => plant.color) // include only if color exists\r\n          .map((plant) => {\r\n            const { color, ...rest } = plant;\r\n            return {\r\n              ...rest,\r\n              PlantType: color === \"green\" ? \"New\" : \"old\",\r\n            };\r\n          }),\r\n      };\r\n    }),\r\n  };\r\n  console.log(\"Payload for the Save is :\", payload);\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/flowDownCA/processMFGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getSaveDataForCA = async (\r\n  tableData,\r\n  droppedObjectData,\r\n  CAItemDetails\r\n) => {\r\n  const objectData =\r\n    droppedObjectData.initialDraggedData?.data?.items?.[0] || {};\r\n  const cardData = droppedObjectData.cardData || {};\r\n\r\n  const payload = {\r\n    CATitle: cardData.Title,\r\n    CAId: objectData.objectId,\r\n    CAOrganization: cardData.organization,\r\n    CACollabSpace: cardData[\"Collaborative Space\"],\r\n    CAOwner: \"e1331143\",\r\n    Items: tableData.map((item) => {\r\n      const caDetails = CAItemDetails.find((ca) => ca.ItemId === item.ItemId);\r\n\r\n      return {\r\n        ItemId: item.ItemId,\r\n        ItemType: caDetails?.ItemType || \"VPMReference\",\r\n        ItemState: caDetails?.ItemState || \"IN_WORK\",\r\n        ItemTitle: item.ItemName,\r\n        ItemMBOM: caDetails?.ItemMBOM || \"N/A\",\r\n        ItemPlants: item.Plant.map((plant) => {\r\n          const originalItem = CAItemDetails.find(\r\n            (ci) => ci.ItemId === item.ItemId\r\n          );\r\n          const wasInOriginal = originalItem?.ItemPlants?.some(\r\n            (p) => p.PlantID === plant.PlantID\r\n          );\r\n\r\n          const isMarkedNew = plant.color === \"green\";\r\n          const isMarkedRemove = plant.color === \"red\";\r\n\r\n          // ✅ CASE 1: It was in DB, and now marked red → REMOVE\r\n          if (wasInOriginal && isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"Remove\",\r\n            };\r\n          }\r\n\r\n          // ✅ CASE 2: It was in DB, and not touched → send without PlantType\r\n          if (wasInOriginal && !isMarkedRemove) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"\", // or just omit this field if preferred\r\n            };\r\n          }\r\n\r\n          // ❌ CASE 3: It was NOT in DB, and is now red → skip it (don’t return anything)\r\n          if (!wasInOriginal && isMarkedRemove) {\r\n            return null;\r\n          }\r\n\r\n          // ✅ CASE 4: It was NOT in DB, and is green → NEW\r\n          if (!wasInOriginal && isMarkedNew) {\r\n            return {\r\n              PlantName: plant.PlantName,\r\n              PlantID: plant.PlantID,\r\n              PlantType: \"New\",\r\n            };\r\n          }\r\n\r\n          return null; // fallback\r\n        }).filter(Boolean), // remove null entries (i.e. case 3)\r\n      };\r\n    }),\r\n  };\r\n\r\n  console.log(\"Payload for Engineering CA Save is:\", payload);\r\n\r\n  const SaveURL =\r\n    \"https://saasimplementationserverdev.azurewebsites.net/plantAssignment/processENGCA\";\r\n\r\n  try {\r\n    const response = await fetchData(\"POST\", SaveURL, payload);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"Failed to send CA save data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["_ref","variant","message","show","className","_jsx","Alert","children","onHide","title","footerButtons","_jsxs","Modal","size","centered","Header","closeButton","Title","Body","Footer","map","btn","index","Button","onClick","label","errors","processedErrors","useMemo","errorGroups","reduce","groups","error","rowMatch","match","columnMatch","errorMsg","split","slice","join","rowNumber","columnName","includes","columns","push","Object","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","style","parent","CellMeasurer","columnIndex","rowIndex","width","column","i","err","ReusableAlert","_Fragment","length","AutoSizer","_ref3","height","List","rowCount","rowHeight","deferredMeasurementCache","console","log","CustomModal","ErrorPopup","WidgetLifecycle","handleDrop","usePlantDropableArea","showSuccessToast","showErrorToast","useToast","loading","setLoading","useState","useEffect","window","widget","trace","addEvent","async","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","userClickedRefresh","sessionStorage","getItem","some","line","isAutoTriggeredRefresh","warn","removeItem","latestDraggedData","store","getState","droppedObject","droppedObjectData","initialDraggedData","data","items","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","Loader","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","CAName","state","type","isMFGCA","CAData","showWarningToast","isStateBlocked","currentState","addPlantPopup","setAddPlantPopup","availablePlantRef","useRef","MSG_OPRATION_HANDLE_ON_STATE_ERROR","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","_availablePlantRef$cu","current","addPlant","AvailablePlant","ref","addedItem","newItems","Seq","Status","Change","CAStatus","MBom","handleFileInputChange","fileInputRef","isFileInputDisabled","handleSubmit","isCreateButtonDisabled","handleReset","performSearch","useInterComSearch","Image","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","id","objectId","objectType","class","link","document","createElement","href","download","click","Form","Group","controlId","Control","multiple","onChange","disabled","FontAwesomeIcon","icon","faRotateLeft","display","cursor","callManufacturingCAApi","response","url","body","arguments","undefined","method","JSON","stringify","axios","headers","fetchData","processManufacturingCA","validatedData","showSuccessToastWithProgress","showErrorToastWithProgress","csrfTokenHeaders","fetchCsrfToken","CAHeaders","_objectSpread","credentials","getValue","credentialsParts","companyName","collabSpace","allPlantsData","getAllPlants","manufacturingCABody","excelData","uniquePlantTitles","Set","row","itemName","toString","trim","plantsList","p","name","plants","forEach","plant","add","parentPlants","plantTitle","matchedPlant","find","replace","PlantName","PlantID","CATitle","CAOrganization","CACollabSpace","CAOwner","Items","ParentPlants","createManufacturingCABody","alignItems","event","stopPropagation","navigator","clipboard","writeText","background","border","marginLeft","color","FaRegCopy","PlantAssignment","useToastWithProgress","isAddingPlant","setIsAddingPlant","setValidatedData","showErrorsModal","setShowErrorsModal","validationErrors","setValidationErrors","initializeDroppableArea","tableKey","setTableKey","tableData","setTableData","assignedPlant","setAssignedPlant","selectedFiles","setSelectedFiles","uniqueData","setUniqueData","CAItemDetailsTable","setCAItemDetailsTable","setIsFileInputDisabled","setIsCreateButtonDisabled","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","isRemoveMode","setIsRemoveMode","dispatch","useDispatch","securityContext1","handleRemovePlant","useCallback","itemId","plantId","item","ItemId","ItemPlants","extractPlantData","plantData","ItemName","plantName","Plant","selectedTableRows","useSelector","CAItemDetails","CAItemObjectDetails","CAAllPlants","CAallPlants","CAheaders","CAisMFGCA","loadingParentDetails","proposedChanges","plantObjectData","isDropped","allPlants","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","getUniquePlant","sourceData","assignedTablePlants","flatMap","_item$Plant","uniqueTablePlants","filter","updateTableData","updatedData","prevKey","cardData","_droppedObjectData$in5","_droppedObjectData$in6","hasMBOM","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in7","_droppedObjectData$in8","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","tableItem","_allPlants$find2","finalObj","classid","classitem","MBOM","test","concat","MBOMName","MBOMValue","Type","initialClass","_allPlants$find3","classObject","rowstoDelete","_allPlants$find4","classItem","result","saveData","success","Finalmessage","MSG_SAVE_SUCCESS","formattedFinalMessage","autoClose","finalobj","ErrorObj","keys","processErrorObj","MSG_SAVE_FAILURE","newTableData","getTableData","uniqueTableData","getUniqueTableData","getCardData","tableColumns","uniqueColumns","value","flexDirection","justifyContent","position","DragAndDropComponent","files","target","validExtensions","Array","from","file","toLowerCase","endsWith","reader","FileReader","onload","Uint8Array","e","workbook","XLSX","sheetName","SheetNames","sheet","Sheets","jsonData","sheet_to_json","header","normalizedHeaders","errorDescription","formattedErrors","onerror","readAsArrayBuffer","handleFileChange","finally","handleHomeClick","setIsDropped","setDroppedObjectData","parentDetails","versions","setPlantObjectData","setCAItemObjectDetails","CardWithDragAndDrop","widgetType","PlantAssignmentToolbarNativeCta","prev","r","reduxRow","reduxPlants","existingPlants","updatedExistingPlants","ep","rp","newPlantsToAdd","existsInRedux","PlantERPStatus","_droppedObjectData$in3","_droppedObjectData$in4","ErrorObject","handleAddData","erroredPlants","_allPlants$find","ClassID","validPlants","invalidPlants","prevUniqueData","rest","_objectWithoutProperties","_excluded","updatedTableData","selectedRow","transformedData","getSaveDataForManufacturingCA","updatedCADetails","originalItem","ItemType","ItemState","ItemTitle","setCAItemDetails","getSaveDataForCA","_store$getState$dropp","_store$getState$dropp2","droppedItems","_droppedObjectData$in","_droppedObjectData$in2","selectedTitles","removedTitles","prevUniquePlants","handleRemoveData","ReusableTable","ContentErrorsModal","_droppedObjectData$in9","_droppedObjectData$in10","_droppedObjectData$in11","objectData","payload","CAId","organization","caDetails","ca","_excluded2","PlantType","_droppedObjectData$in12","_droppedObjectData$in13","_droppedObjectData$in14","ItemMBOM","_originalItem$ItemPla","ci","wasInOriginal","isMarkedNew","isMarkedRemove","Boolean","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","querySelector","getElementById","appendChild","ReactDOM","render","Provider","ToastContainer","start","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}